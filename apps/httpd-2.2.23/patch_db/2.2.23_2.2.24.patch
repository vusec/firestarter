diff -p --text -r /tmp/patch.inc.get1.N6Z6da/include/ap_release.h /tmp/patch.inc.get2.x7Dnb9/include/ap_release.h
*** /tmp/patch.inc.get1.N6Z6da/include/ap_release.h	2013-04-28 19:22:07.111280101 +0200
--- /tmp/patch.inc.get2.x7Dnb9/include/ap_release.h	2013-04-28 19:22:10.075294807 +0200
***************
*** 25,31 ****
  #include "apr_general.h" /* stringify */
  
  #define AP_SERVER_COPYRIGHT \
!     "Copyright 2012 The Apache Software Foundation."
  
  /*
   * The below defines the base string of the Server: header. Additional
--- 25,31 ----
  #include "apr_general.h" /* stringify */
  
  #define AP_SERVER_COPYRIGHT \
!     "Copyright 2013 The Apache Software Foundation."
  
  /*
   * The below defines the base string of the Server: header. Additional
***************
*** 45,51 ****
  
  #define AP_SERVER_MAJORVERSION_NUMBER 2
  #define AP_SERVER_MINORVERSION_NUMBER 2
! #define AP_SERVER_PATCHLEVEL_NUMBER   23
  #define AP_SERVER_DEVBUILD_BOOLEAN    0
  
  /* Synchronize the above with docs/manual/style/version.ent */ 
--- 45,51 ----
  
  #define AP_SERVER_MAJORVERSION_NUMBER 2
  #define AP_SERVER_MINORVERSION_NUMBER 2
! #define AP_SERVER_PATCHLEVEL_NUMBER   24
  #define AP_SERVER_DEVBUILD_BOOLEAN    0
  
  /* Synchronize the above with docs/manual/style/version.ent */ 
diff -p --text -r /tmp/patch.inc.get1.N6Z6da/include/util_ldap.h /tmp/patch.inc.get2.x7Dnb9/include/util_ldap.h
*** /tmp/patch.inc.get1.N6Z6da/include/util_ldap.h	2013-04-28 19:22:07.111280101 +0200
--- /tmp/patch.inc.get2.x7Dnb9/include/util_ldap.h	2013-04-28 19:22:10.071294778 +0200
***************
*** 30,36 ****
  #include "apr_time.h"
  #include "apr_ldap.h"
  
! #ifdef LDAP_UNAVAILABLE
  #define AP_LDAP_IS_SERVER_DOWN(s)                ((s) == LDAP_SERVER_DOWN \
                  ||(s) == LDAP_UNAVAILABLE)
  #else
--- 30,36 ----
  #include "apr_time.h"
  #include "apr_ldap.h"
  
! #if defined(LDAP_UNAVAILABLE) || APR_HAS_MICROSOFT_LDAPSDK
  #define AP_LDAP_IS_SERVER_DOWN(s)                ((s) == LDAP_SERVER_DOWN \
                  ||(s) == LDAP_UNAVAILABLE)
  #else
diff -p --text -r /tmp/patch.inc.get1.N6Z6da/server/mpm/experimental/event/event.c /tmp/patch.inc.get2.x7Dnb9/server/mpm/experimental/event/event.c
*** /tmp/patch.inc.get1.N6Z6da/server/mpm/experimental/event/event.c	2013-04-28 19:22:07.303281061 +0200
--- /tmp/patch.inc.get2.x7Dnb9/server/mpm/experimental/event/event.c	2013-04-28 19:22:10.099294915 +0200
***************
*** 19,28 ****
   *
   * After a client completes the first request, the client can keep the
   * connection open to send more requests with the same socket.  This can save
!  * signifigant overhead in creating TCP connections.  However, the major
   * disadvantage is that Apache traditionally keeps an entire child
   * process/thread waiting for data from the client.  To solve this problem,
!  * this MPM has a dedicated thread for handling both the Listenting sockets,
   * and all sockets that are in a Keep Alive status.
   *
   * The MPM assumes the underlying apr_pollset implmentation is somewhat
--- 19,28 ----
   *
   * After a client completes the first request, the client can keep the
   * connection open to send more requests with the same socket.  This can save
!  * significant overhead in creating TCP connections.  However, the major
   * disadvantage is that Apache traditionally keeps an entire child
   * process/thread waiting for data from the client.  To solve this problem,
!  * this MPM has a dedicated thread for handling both the Listening sockets,
   * and all sockets that are in a Keep Alive status.
   *
   * The MPM assumes the underlying apr_pollset implmentation is somewhat
***************
*** 30,36 ****
   * enables the MPM to avoid extra high level locking or having to wake up the
   * listener thread when a keep-alive socket needs to be sent to it.
   *
!  * This MPM not preform well on older platforms that do not have very good
   * threading, like Linux with a 2.4 kernel, but this does not matter, since we
   * require EPoll or KQueue.
   *
--- 30,36 ----
   * enables the MPM to avoid extra high level locking or having to wake up the
   * listener thread when a keep-alive socket needs to be sent to it.
   *
!  * This MPM does not perform well on older platforms that do not have very good
   * threading, like Linux with a 2.4 kernel, but this does not matter, since we
   * require EPoll or KQueue.
   *
diff -p --text -r /tmp/patch.inc.get1.N6Z6da/server/mpm_common.c /tmp/patch.inc.get2.x7Dnb9/server/mpm_common.c
*** /tmp/patch.inc.get1.N6Z6da/server/mpm_common.c	2013-04-28 19:22:07.303281061 +0200
--- /tmp/patch.inc.get2.x7Dnb9/server/mpm_common.c	2013-04-28 19:22:10.099294915 +0200
*************** static apr_status_t pod_signal_internal(
*** 636,649 ****
      return rv;
  }
  
! /* This function connects to the server, then immediately closes the connection.
!  * This permits the MPM to skip the poll when there is only one listening
!  * socket, because it provides a alternate way to unblock an accept() when
!  * the pod is used.
!  */
  static apr_status_t dummy_connection(ap_pod_t *pod)
  {
!     char *srequest;
      apr_status_t rv;
      apr_socket_t *sock;
      apr_pool_t *p;
--- 636,649 ----
      return rv;
  }
  
! /* This function connects to the server and sends enough data to
!  * ensure the child wakes up and processes a new connection.  This
!  * permits the MPM to skip the poll when there is only one listening
!  * socket, because it provides a alternate way to unblock an accept()
!  * when the pod is used.  */
  static apr_status_t dummy_connection(ap_pod_t *pod)
  {
!     const char *data;
      apr_status_t rv;
      apr_socket_t *sock;
      apr_pool_t *p;
*************** static apr_status_t dummy_connection(ap_
*** 697,720 ****
          return rv;
      }
  
!     /* Create the request string. We include a User-Agent so that
!      * adminstrators can track down the cause of the odd-looking
!      * requests in their logs.
!      */
!     srequest = apr_pstrcat(p, "OPTIONS * HTTP/1.0\r\nUser-Agent: ",
                             ap_get_server_banner(),
                             " (internal dummy connection)\r\n\r\n", NULL);
  
!     /* Since some operating systems support buffering of data or entire
!      * requests in the kernel, we send a simple request, to make sure
!      * the server pops out of a blocking accept().
!      */
!     /* XXX: This is HTTP specific. We should look at the Protocol for each
!      * listener, and send the correct type of request to trigger any Accept
!      * Filters.
!      */
!     len = strlen(srequest);
!     apr_socket_send(sock, srequest, &len);
      apr_socket_close(sock);
      apr_pool_destroy(p);
  
--- 697,733 ----
          return rv;
      }
  
!     if (ap_listeners->protocol && strcasecmp(ap_listeners->protocol, "https") == 0) {
!         /* Send a TLS 1.0 close_notify alert.  This is perhaps the
!          * "least wrong" way to open and cleanly terminate an SSL
!          * connection.  It should "work" without noisy error logs if
!          * the server actually expects SSLv3/TLSv1.  With
!          * SSLv23_server_method() OpenSSL's SSL_accept() fails
!          * ungracefully on receipt of this message, since it requires
!          * an 11-byte ClientHello message and this is too short. */
!         static const unsigned char tls10_close_notify[7] = {
!             '\x15',         /* TLSPlainText.type = Alert (21) */
!             '\x03', '\x01', /* TLSPlainText.version = {3, 1} */
!             '\x00', '\x02', /* TLSPlainText.length = 2 */
!             '\x01',         /* Alert.level = warning (1) */
!             '\x00'          /* Alert.description = close_notify (0) */
!         };
!         data = (const char *)tls10_close_notify;
!         len = sizeof(tls10_close_notify);
!     }
!     else /* ... XXX other request types here? */ {
!         /* Create an HTTP request string.  We include a User-Agent so
!          * that adminstrators can track down the cause of the
!          * odd-looking requests in their logs.  A complete request is
!          * used since kernel-level filtering may require that much
!          * data before returning from accept(). */
!         data = apr_pstrcat(p, "OPTIONS * HTTP/1.0\r\nUser-Agent: ",
                             ap_get_server_banner(),
                             " (internal dummy connection)\r\n\r\n", NULL);
+         len = strlen(data);
+     }
  
!     apr_socket_send(sock, data, &len);
      apr_socket_close(sock);
      apr_pool_destroy(p);
  

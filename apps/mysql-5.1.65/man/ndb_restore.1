'\" t
.\"     Title: \fBndb_restore\fR
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 07/12/2012
.\"    Manual: MySQL Database System
.\"    Source: MySQL 5.1
.\"  Language: English
.\"
.TH "\FBNDB_RESTORE\FR" "1" "07/12/2012" "MySQL 5\&.1" "MySQL Database System"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.\" MySQL Cluster: backups
.\" backups: in MySQL Cluster
.\" MySQL Cluster: restoring backups
.\" restoring backups: in MySQL Cluster
.\" ndb_restore
.SH "NAME"
ndb_restore \- restore a MySQL Cluster backup
.SH "SYNOPSIS"
.HP \w'\fBndb_restore\ \fR\fB\fIoptions\fR\fR\ 'u
\fBndb_restore \fR\fB\fIoptions\fR\fR
.SH "DESCRIPTION"
.PP
The cluster restoration program is implemented as a separate command\-line utility
\fBndb_restore\fR, which can normally be found in the MySQL
bin
directory\&. This program reads the files created as a result of the backup and inserts the stored information into the database\&.
.PP
\fBndb_restore\fR
must be executed once for each of the backup files that were created by the
START BACKUP
command used to create the backup (see
Section\ \&17.5.3.2, \(lqUsing The MySQL Cluster Management Client to Create a Backup\(rq)\&. This is equal to the number of data nodes in the cluster at the time that the backup was created\&.
.\" single user mode (MySQL Cluster): and ndb_restore
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
Before using
\fBndb_restore\fR, it is recommended that the cluster be running in single user mode, unless you are restoring multiple data nodes in parallel\&. See
Section\ \&17.5.8, \(lqMySQL Cluster Single User Mode\(rq, for more information\&.
.sp .5v
.RE
.PP
The following table includes options that are specific to the MySQL Cluster native backup restoration program
\fBndb_restore\fR\&. Additional descriptions follow the table\&. For options common to all MySQL Cluster programs, see
Options Common to MySQL Cluster Programs(1)\&.
.PP
Typical options for this utility are shown here:
.sp
.if n \{\
.RS 4
.\}
.nf
ndb_restore [\-c \fIconnectstring\fR] \-n \fInode_id\fR [\-m] \-b \fIbackup_id\fR \e
    \-r \-\-backup_path=\fI/path/to/backup/files\fR
.fi
.if n \{\
.RE
.\}
.PP
.\" restore_connect option (ndb_restore)
The
\fB\-c\fR
option is used to specify a connectstring which tells
ndb_restore
where to locate the cluster management server\&. (See
Section\ \&17.3.2.3, \(lqThe MySQL Cluster Connectstring\(rq, for information on connectstrings\&.) If this option is not used, then
\fBndb_restore\fR
attempts to connect to a management server on
localhost:1186\&. This utility acts as a cluster API node, and so requires a free connection
\(lqslot\(rq
to connect to the cluster management server\&. This means that there must be at least one
[api]
or
[mysqld]
section that can be used by it in the cluster
config\&.ini
file\&. It is a good idea to keep at least one empty
[api]
or
[mysqld]
section in
config\&.ini
that is not being used for a MySQL server or other application for this reason (see
Section\ \&17.3.2.7, \(lqDefining SQL and Other API Nodes in a MySQL Cluster\(rq)\&.
.PP
You can verify that
\fBndb_restore\fR
is connected to the cluster by using the
\fBSHOW\fR
command in the
\fBndb_mgm\fR
management client\&. You can also accomplish this from a system shell, as shown here:
.sp
.if n \{\
.RS 4
.\}
.nf
shell> \fBndb_mgm \-e "SHOW"\fR
.fi
.if n \{\
.RE
.\}
.PP
.\" restore_nodeid option (ndb_restore)
\fB\-n\fR
is used to specify the node ID of the data node on which the backups were taken\&.
.PP
The first time you run the
\fBndb_restore\fR
restoration program, you also need to restore the metadata\&. In other words, you must re\-create the database tables\(emthis can be done by running it with the
\fB\-m\fR
option\&. Note that the cluster should have an empty database when starting to restore a backup\&. (In other words, you should start
\fBndbd\fR
with
\fB\-\-initial\fR
prior to performing the restore\&. You should also remove manually any Disk Data files present in the data node\'s
DataDir\&.)
.PP
.\" restore_skip-table-check option (ndb_restore)
It is possible to restore data without restoring table metadata\&. Prior to MySQL 5\&.1\&.17,
\fBndb_restore\fR
did not perform any checks of table schemas; if a table was altered between the time the backup was taken and when
\fBndb_restore\fR
was run,
\fBndb_restore\fR
would still attempt to restore the data to the altered table\&.
.PP
Beginning with MySQL 5\&.1\&.17, the default behavior is for
\fBndb_restore\fR
to fail with an error if table data do not match the table schema; this can be overridden using the
\fB\-\-skip\-table\-check\fR
or
\fB\-s\fR
option\&. Prior to MySQL 5\&.1\&.21, if this option is used, then
\fBndb_restore\fR
attempts to fit data into the existing table schema, but the result of restoring a backup to a table schema that does not match the original is unspecified\&.
.PP
Beginning with MySQL Cluster NDB 6\&.3\&.35, MySQL Cluster NDB 7\&.0\&.16, and MySQL Cluster NDB 7\&.1\&.5, some of the restrictions on mismatches in column definitions when restoring data using
\fBndb_restore\fR
are relaxed; when one of these types of mismatches is encountered,
\fBndb_restore\fR
does not stop with an error as it did previously, but rather accepts the data and inserts it into the target table while issuing a warning to the user that this is being done\&. This behavior occurs whether or not either of the options
\fB\-\-skip\-table\-check\fR
or
\fB\-\-promote\-attributes\fR
is in use\&. These differences in column definitions are of the following types:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Different
COLUMN_FORMAT
settings (FIXED,
DYNAMIC,
DEFAULT)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Different
STORAGE
settings (MEMORY,
DISK)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Different default values
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Different distribution key settings
.RE
.PP
.\" attribute promotion: ndb_restore
.\" ndb_restore: attribute promotion
.\" promote-attributes option (ndb_restore)
Beginning with MySQL Cluster NDB 6\&.3\&.8,
\fBndb_restore\fR
supports limited
attribute promotion
in much the same way that it is supported by MySQL replication; that is, data backed up from a column of a given type can generally be restored to a column using a
\(lqlarger, similar\(rq
type\&. For example, data from a
CHAR(20)
column can be restored to a column declared as
VARCHAR(20),
VARCHAR(30), or
CHAR(30); data from a
MEDIUMINT
column can be restored to a column of type
INT
or
BIGINT\&. See
Section\ \&16.4.1.7.2, \(lqReplication of Columns Having Different Data Types\(rq, for a table of type conversions currently supported by attribute promotion\&.
.PP
Attribute promotion by
\fBndb_restore\fR
must be enabled explicitly, as follows:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
Prepare the table to which the backup is to be restored\&.
\fBndb_restore\fR
cannot be used to re\-create the table with a different definition from the original; this means that you must either create the table manually, or alter the columns which you wish to promote using
ALTER TABLE
after restoring the table metadata but before restoring the data\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Invoke
\fBndb_restore\fR
with the
\fB\-\-promote\-attributes\fR
option (short form
\fB\-A\fR) when restoring the table data\&. Attribute promotion does not occur if this option is not used; instead, the restore operation fails with an error\&.
.RE
.PP
.\" ndb_restore: lossy-conversions option
.\" lossy-conversions option (ndb_restore)
\fB\-\-lossy\-conversions\fR,
\fB\-L\fR
.TS
allbox tab(:);
l l s s
l l s s
l l s s
l l s s
^ l l s
^ l l s.
T{
\fBVersion Introduced\fR
T}:T{
5\&.1\&.51\-ndb\-7\&.1\&.11
T}
T{
\fBCommand\-Line Format\fR
T}:T{
\-\-lossy\-conversions
T}
T{
T}:T{
\-L
T}
T{
\ \&
T}:T{
\fBPermitted Values \fR
T}
:T{
\fBType\fR
T}:T{
boolean
T}
:T{
\fBDefault\fR
T}:T{
FALSE
T}
.TE
.sp 1
.PP
This option is intended to complement the
\fB\-\-promote\-attributes\fR
option\&. Using
\fB\-\-lossy\-conversions\fR
allows lossy conversions of column values (type demotions or changes in sign) when restoring data from backup\&. With some exceptions, the rules governing demotion are the same as for MySQL replication; see
Section\ \&16.4.1.7.2, \(lqReplication of Columns Having Different Data Types\(rq, for information about specific type conversions currently supported by attribute demotion\&.
.PP
\fBndb_restore\fR
reports any truncation of data that it performs during lossy conversions once per attribute and column\&.
.PP
This option was added in MySQL Cluster NDB 7\&.1\&.11\&.
.PP
.\" preserve-trailing-spaces option (ndb_restore)
The
\fB\-\-preserve\-trailing\-spaces\fR
option is also available beginning with MySQL Cluster NDB 6\&.3\&.8\&. This option (short form
\fB\-R\fR) causes trailing spaces to be preserved when promoting a fixed\-width character data type to its variable\-width equivalent\(emthat is, when promoting a
CHAR
column value to
VARCHAR
or a
BINARY
column value to
VARBINARY\&. Otherwise, any trailing spaces are dropped from such column values when they are inserted into the new columns\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
Although you can promote
CHAR
columns to
VARCHAR
and
BINARY
columns to
VARBINARY, you cannot promote
VARCHAR
columns to
CHAR
or
VARBINARY
columns to
BINARY\&.
.sp .5v
.RE
.PP
.\" backupid option (ndb_restore)
The
\fB\-b\fR
option is used to specify the ID or sequence number of the backup, and is the same number shown by the management client in the
Backup \fIbackup_id\fR completed
message displayed upon completion of a backup\&. (See
Section\ \&17.5.3.2, \(lqUsing The MySQL Cluster Management Client to Create a Backup\(rq\&.)
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBImportant\fR
.ps -1
.br
.PP
When restoring cluster backups, you must be sure to restore all data nodes from backups having the same backup ID\&. Using files from different backups will at best result in restoring the cluster to an inconsistent state, and may fail altogether\&.
.sp .5v
.RE
.PP
.\" restore_epoch option (ndb_restore)
\fB\-\-restore_epoch\fR
(short form:
\fB\-e\fR) adds (or restores) epoch information to the cluster replication status table\&. This is useful for starting replication on a MySQL Cluster replication slave\&. When this option is used, the row in the
mysql\&.ndb_apply_status
having
0
in the
id
column is updated if it already exists; such a row is inserted if it does not already exist\&. (See
Section\ \&17.6.9, \(lqMySQL Cluster Backups With MySQL Cluster Replication\(rq\&.)
.PP
.\" restore_data option (ndb_restore)
\fB\-\-restore_data\fR
causes
\fBndb_restore\fR
to output
NDB
table data and logs\&.
.PP
.\" restore_meta option (ndb_restore)
This option causes
\fBndb_restore\fR
to print
NDB
table metadata\&.
.PP
.\" restore-privilege-tables option (ndb_restore)
\fBndb_restore\fR
does not by default restore distributed MySQL privilege tables (MySQL Cluster NDB 7\&.2\&.0 and later)\&. This option causes
\fBndb_restore\fR
to restore the privilege tables\&.
.PP
This works only if the privilege tables were converted to
NDB
before the backup was taken\&. For more information, see
Section\ \&17.5.14, \(lqDistributed MySQL Privileges for MySQL Cluster\(rq\&.
.PP
.\" backup_path option (ndb_restore)
The path to the backup directory is required; this is supplied to
\fBndb_restore\fR
using the
\fB\-\-backup_path\fR
option, and must include the subdirectory corresponding to the ID backup of the backup to be restored\&. For example, if the data node\'s
DataDir
is
/var/lib/mysql\-cluster, then the backup directory is
/var/lib/mysql\-cluster/BACKUP, and the backup files for the backup with the ID 3 can be found in
/var/lib/mysql\-cluster/BACKUP/BACKUP\-3\&. The path may be absolute or relative to the directory in which the
\fBndb_restore\fR
executable is located, and may be optionally prefixed with
\fBbackup_path=\fR\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
Previous to MySQL 5\&.1\&.17 and MySQL Cluster NDB 6\&.1\&.5, the path to the backup directory was specified as shown here, with
\fBbackup_path=\fR
being optional:
.sp
.if n \{\
.RS 4
.\}
.nf
[backup_path=]\fI/path/to/backup/files\fR
.fi
.if n \{\
.RE
.\}
.PP
Beginning with MySQL 5\&.1\&.17 and MySQL Cluster NDB 6\&.1\&.5, this syntax changed to
\fB\-\-backup_path=\fR\fB\fI/path/to/backup/files\fR\fR, to conform more closely with options used by other MySQL programs;
\fB\-\-backupid\fR
is required, and there is no short form for this option\&.
.sp .5v
.RE
.PP
It is possible to restore a backup to a database with a different configuration than it was created from\&. For example, suppose that a backup with backup ID
12, created in a cluster with two database nodes having the node IDs
2
and
3, is to be restored to a cluster with four nodes\&. Then
\fBndb_restore\fR
must be run twice\(emonce for each database node in the cluster where the backup was taken\&. However,
\fBndb_restore\fR
cannot always restore backups made from a cluster running one version of MySQL to a cluster running a different MySQL version\&. See
Section\ \&17.2.7, \(lqUpgrading and Downgrading MySQL Cluster\(rq, for more information\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBImportant\fR
.ps -1
.br
.PP
It is not possible to restore a backup made from a newer version of MySQL Cluster using an older version of
\fBndb_restore\fR\&. You can restore a backup made from a newer version of MySQL to an older cluster, but you must use a copy of
\fBndb_restore\fR
from the newer MySQL Cluster version to do so\&.
.PP
For example, to restore a cluster backup taken from a cluster running MySQL Cluster NDB 7\&.1\&.8 to a cluster running MySQL Cluster NDB 7\&.0\&.16, you must use the
\fBndb_restore\fR
that comes with the MySQL Cluster NDB 7\&.1\&.8 distribution\&.
.sp .5v
.RE
.PP
For more rapid restoration, the data may be restored in parallel, provided that there is a sufficient number of cluster connections available\&. That is, when restoring to multiple nodes in parallel, you must have an
[api]
or
[mysqld]
section in the cluster
config\&.ini
file available for each concurrent
\fBndb_restore\fR
process\&. However, the data files must always be applied before the logs\&.
.PP
Formerly, when using
\fBndb_restore\fR
to restore a backup made from a MySQL 5\&.0 cluster to a 5\&.1 cluster,
VARCHAR
columns were not resized and were recreated using the 5\&.0 fixed format\&. Beginning with MySQL 5\&.1\&.19,
ndb_restore
recreates such
VARCHAR
columns using MySQL Cluster 5\&.1\'s variable\-width format\&. Also beginning with MySQL 5\&.1\&.19, this behavior can be overridden using the
\fB\-\-no\-upgrade\fR
option (short form:
\fB\-u\fR) when running
\fBndb_restore\fR\&.
.PP
.\" print_data option (ndb_restore)
.\" ndb_restore: print_data option
\fB\-\-print_data\fR
.PP
The
\fB\-\-print_data\fR
option causes
\fBndb_restore\fR
to direct its output to
stdout\&.
.PP
TEXT
and
BLOB
column values are always truncated to the first 256 bytes in the output; this cannot currently be overridden when using
\fB\-\-print_data\fR\&.
.PP
Beginning with MySQL 5\&.1\&.18, several additional options are available for use with the
\fB\-\-print_data\fR
option in generating data dumps, either to
stdout, or to a file\&. These are similar to some of the options used with
\fBmysqldump\fR, and are shown in the following list:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
.\" ndb_restore: tab option
.\" tab option (ndb_restore)
\fB\-\-tab\fR,
\fB\-T\fR
.TS
allbox tab(:);
l l s s
l l s s
l l s s.
T{
\fBVersion Introduced\fR
T}:T{
5\&.1\&.18
T}
T{
\fBCommand\-Line Format\fR
T}:T{
\-\-tab=path
T}
T{
T}:T{
\-T
T}
.TE
.sp 1
This option causes
\fB\-\-print_data\fR
to create dump files, one per table, each named
\fItbl_name\fR\&.txt\&. It requires as its argument the path to the directory where the files should be saved; use
\&.
for the current directory\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
.\" ndb_restore: fields-enclosed-by option
.\" fields-enclosed-by option (ndb_restore)
\fB\-\-fields\-enclosed\-by=\fR\fB\fIstring\fR\fR
.TS
allbox tab(:);
l l s s
l l s s
l l s s
^ l l s
^ l l s.
T{
\fBVersion Introduced\fR
T}:T{
5\&.1\&.18
T}
T{
\fBCommand\-Line Format\fR
T}:T{
\-\-fields\-enclosed\-by=char
T}
T{
\ \&
T}:T{
\fBPermitted Values \fR
T}
:T{
\fBType\fR
T}:T{
string
T}
:T{
\fBDefault\fR
T}:T{
T}
.TE
.sp 1
Each column values are enclosed by the string passed to this option (regardless of data type; see next item)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
.\" ndb_restore: fields-optionally-enclosed-by option
.\" fields-optionally-enclosed-by option (ndb_restore)
\fB\-\-fields\-optionally\-enclosed\-by=\fR\fB\fIstring\fR\fR
.TS
allbox tab(:);
l l s s
l l s s
l l s s
^ l l s
^ l l s.
T{
\fBVersion Introduced\fR
T}:T{
5\&.1\&.18
T}
T{
\fBCommand\-Line Format\fR
T}:T{
\-\-fields\-optionally\-enclosed\-by
T}
T{
\ \&
T}:T{
\fBPermitted Values \fR
T}
:T{
\fBType\fR
T}:T{
string
T}
:T{
\fBDefault\fR
T}:T{
T}
.TE
.sp 1
The string passed to this option is used to enclose column values containing character data (such as
CHAR,
VARCHAR,
BINARY,
TEXT, or
ENUM)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
.\" ndb_restore: fields-terminated-by option
.\" fields-terminated-by option (ndb_restore)
\fB\-\-fields\-terminated\-by=\fR\fB\fIstring\fR\fR
.TS
allbox tab(:);
l l s s
l l s s
l l s s
^ l l s
^ l l s.
T{
\fBVersion Introduced\fR
T}:T{
5\&.1\&.18
T}
T{
\fBCommand\-Line Format\fR
T}:T{
\-\-fields\-terminated\-by=char
T}
T{
\ \&
T}:T{
\fBPermitted Values \fR
T}
:T{
\fBType\fR
T}:T{
string
T}
:T{
\fBDefault\fR
T}:T{
\et (tab)
T}
.TE
.sp 1
The string passed to this option is used to separate column values\&. The default value is a tab character (\et)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
.\" ndb_restore: hex option
.\" hex option (ndb_restore)
\fB\-\-hex\fR
.TS
allbox tab(:);
l l s s
l l s s.
T{
\fBVersion Introduced\fR
T}:T{
5\&.1\&.18
T}
T{
\fBCommand\-Line Format\fR
T}:T{
\-\-hex
T}
.TE
.sp 1
If this option is used, all binary values are output in hexadecimal format\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
.\" ndb_restore: fields-terminated-by option
.\" fields-terminated-by option (ndb_restore)
\fB\-\-fields\-terminated\-by=\fR\fB\fIstring\fR\fR
.TS
allbox tab(:);
l l s s
l l s s
l l s s
^ l l s
^ l l s.
T{
\fBVersion Introduced\fR
T}:T{
5\&.1\&.18
T}
T{
\fBCommand\-Line Format\fR
T}:T{
\-\-fields\-terminated\-by=char
T}
T{
\ \&
T}:T{
\fBPermitted Values \fR
T}
:T{
\fBType\fR
T}:T{
string
T}
:T{
\fBDefault\fR
T}:T{
\et (tab)
T}
.TE
.sp 1
This option specifies the string used to end each line of output\&. The default is a linefeed character (\en)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
.\" ndb_restore: append option
.\" append option (ndb_restore)
\fB\-\-append\fR
.TS
allbox tab(:);
l l s s
l l s s.
T{
\fBVersion Introduced\fR
T}:T{
5\&.1\&.18
T}
T{
\fBCommand\-Line Format\fR
T}:T{
\-\-append
T}
.TE
.sp 1
When used with the
\fB\-\-tab\fR
and
\fB\-\-print_data\fR
options, this causes the data to be appended to any existing files having the same names\&.
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
If a table has no explicit primary key, then the output generated when using the
\fB\-\-print_data\fR
option includes the table\'s hidden primary key\&.
.sp .5v
.RE
.PP
.\" ndb_restore: print_metadata option
.\" print_metadata option (ndb_restore)
\fB\-\-print_metadata\fR
.PP
This option causes
\fBndb_restore\fR
to print all metadata to
stdout\&.
.PP
.\" ndb_restore: print_log option
.\" print_log option (ndb_restore)
\fB\-\-print_log\fR
.PP
The
\fB\-\-print_log\fR
option causes
\fBndb_restore\fR
to output its log to
stdout\&.
.PP
.\" ndb_restore: print option
.\" print option (ndb_restore)
\fB\-\-print\fR
.PP
Causes
\fBndb_restore\fR
to print all data, metadata, and logs to
stdout\&. Equivalent to using the
\fB\-\-print_data\fR,
\fB\-\-print_metadata\fR, and
\fB\-\-print_log\fR
options together\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
Use of
\fB\-\-print\fR
or any of the
\fB\-\-print_*\fR
options is in effect performing a dry run\&. Including one or more of these options causes any output to be redirected to
stdout; in such cases,
\fBndb_restore\fR
makes no attempt to restore data or metadata to a MySQL Cluster\&.
.sp .5v
.RE
.PP
.\" ndb_restore: dont_ignore_systab_0 option
.\" dont_ignore_systab_0 option (ndb_restore)
\fB\-\-dont_ignore_systab_0\fR
.PP
Normally, when restoring table data and metadata,
\fBndb_restore\fR
ignores the copy of the
NDB
system table that is present in the backup\&.
\fB\-\-dont_ignore_systab_0\fR
causes the system table to be restored\&.
\fIThis option is intended for experimental and development use only, and is not recommended in a production environment\fR\&.
.PP
.\" ndb_restore: ndb-nodegroup-map option
.\" ndb-nodegroup-map option (ndb_restore)
\fB\-\-ndb\-nodegroup\-map\fR,
\fB\-z\fR
.PP
This option can be used to restore a backup taken from one node group to a different node group\&. Its argument is a list of the form
\fIsource_node_group\fR, \fItarget_node_group\fR\&.
.PP
.\" ndb_restore: no-binlog option
.\" no-binlog option (ndb_restore)
\fB\-\-no\-binlog\fR
.PP
This option prevents any connected SQL nodes from writing data restored by
\fBndb_restore\fR
to their binary logs\&. Available beginning with MySQL Cluster NDB 6\&.2\&.16 and MySQL Cluster NDB 6\&.3\&.16\&.
.PP
.\" ndb_restore: no-restore-disk-objects option
.\" no-restore-disk-objects option (ndb_restore)
\fB\-\-no\-restore\-disk\-objects\fR,
\fB\-d\fR
.PP
This option stops
\fBndb_restore\fR
from restoring any MySQL Cluster Disk Data objects, such as tablespaces and log file groups; see
Section\ \&17.5.12, \(lqMySQL Cluster Disk Data Tables\(rq, for more information about these\&. Added in MySQL 5\&.1\&.6\&.
.PP
.\" ndb_restore: parallelism option
.\" parallelism option (ndb_restore)
\fB\-\-parallelism=#\fR,
\fB\-p\fR
.PP
Determines the maximum number of parallel transactions that
\fBndb_restore\fR
tries to use\&. By default, this is 128; the minimum is 1, and the maximum is 1024\&.
.PP
.\" ndb_restore: progress-frequency option
.\" progress-frequency option (ndb_restore)
\fB\-\-progress\-frequency=\fR\fB\fIN\fR\fR
.PP
Print a status report each
\fIN\fR
seconds while the backup is in progress\&. 0 (the default) causes no status reports to be printed\&. The maximum is 65535\&.
.PP
.\" ndb_restore: verbose option
.\" verbose option (ndb_restore)
\fB\-\-verbose=#\fR
.PP
Sets the level for the verbosity of the output\&. The minimum is 0; the maximum is 255\&. The default value is 1\&.
.PP
Beginning with MySQL 5\&.1\&.18, it is possible to restore only selected databases, or selected tables from a single database, using the syntax shown here:
.sp
.if n \{\
.RS 4
.\}
.nf
ndb_restore \fIother_options\fR \fIdb_name\fR,[\fIdb_name\fR[,\&.\&.\&.] | \fItbl_name\fR[,\fItbl_name\fR][,\&.\&.\&.]]
.fi
.if n \{\
.RE
.\}
.PP
In other words, you can specify either of the following to be restored:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
All tables from one or more databases
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
One or more tables from a single database
.RE
.PP
.\" ndb_restore: include-databases option
.\" include-databases option (ndb_restore)
\fB\-\-include\-databases=\fR\fB\fIdb_name\fR\fR\fB[,\fR\fB\fIdb_name\fR\fR\fB][,\&.\&.\&.]\fR
.TS
allbox tab(:);
l l s s
l l s s
l l s s
^ l l s
^ l l s.
T{
\fBVersion Introduced\fR
T}:T{
5\&.1\&.31\-ndb\-6\&.3\&.22, 5\&.1\&.32\-ndb\-6\&.4\&.3
T}
T{
\fBCommand\-Line Format\fR
T}:T{
\-\-include\-databases=db\-list
T}
T{
\ \&
T}:T{
\fBPermitted Values \fR
T}
:T{
\fBType\fR
T}:T{
string
T}
:T{
\fBDefault\fR
T}:T{
T}
.TE
.sp 1
.PP
.\" ndb_restore: include-tables option
.\" include-tables option (ndb_restore)
\fB\-\-include\-tables=\fR\fB\fIdb_name\&.tbl_name\fR\fR\fB[,\fR\fB\fIdb_name\&.tbl_name\fR\fR\fB][,\&.\&.\&.]\fR
.TS
allbox tab(:);
l l s s
l l s s
l l s s
^ l l s
^ l l s.
T{
\fBVersion Introduced\fR
T}:T{
5\&.1\&.31\-ndb\-6\&.3\&.22, 5\&.1\&.32\-ndb\-6\&.4\&.3
T}
T{
\fBCommand\-Line Format\fR
T}:T{
\-\-include\-tables=table\-list
T}
T{
\ \&
T}:T{
\fBPermitted Values \fR
T}
:T{
\fBType\fR
T}:T{
string
T}
:T{
\fBDefault\fR
T}:T{
T}
.TE
.sp 1
.PP
Beginning with MySQL Cluster NDB 6\&.3\&.22 and MySQL Cluster NDB 6\&.4\&.3, you can (and should) use instead the
\fB\-\-include\-databases\fR
option or the
\fB\-\-include\-tables\fR
option for restoring only specific databases or tables, respectively\&.
\fB\-\-include\-databases\fR
takes a comma\-delimited list of databases to be restored\&.
\fB\-\-include\-tables\fR
takes a comma\-delimited list of tables (in
\fIdatabase\fR\&.\fItable\fR
format) to be restored\&.
.PP
When
\fB\-\-include\-databases\fR
or
\fB\-\-include\-tables\fR
is used, only those databases or tables named by the option are restored; all other databases and tables are excluded by
\fBndb_restore\fR, and are not restored\&.
.PP
The following table shows several invocations of
\fBndb_restore\fR
using
\fB\-\-include\-*\fR
options (other options possibly required have been omitted for clarity), and the effects these have on restoring from a MySQL Cluster backup:
.TS
allbox tab(:);
lB lB.
T{
Option Used
T}:T{
Result
T}
.T&
l l
l l
l l
l l.
T{
\fB\-\-include\-databases=db1\fR
T}:T{
Only tables in database db1 are restored; all tables
                in all other databases are ignored
T}
T{
\fB\-\-include\-databases=db1,db2\fR (or
                \fB\-\-include\-databases=db1\fR
                \fB\-\-include\-databases=db2\fR)
T}:T{
Only tables in databases db1 and
                db2 are restored; all tables in all
                other databases are ignored
T}
T{
\fB\-\-include\-tables=db1\&.t1\fR
T}:T{
Only table t1 in database db1 is
                restored; no other tables in db1 or
                in any other database are restored
T}
T{
\fB\-\-include\-tables=db1\&.t2,db2\&.t1\fR (or
                \fB\-\-include\-tables=db1\&.t2\fR
                \fB\-\-include\-tables=db2\&.t1\fR)
T}:T{
Only the table t2 in database db1
                and the table t1 in database
                db2 are restored; no other tables in
                db1, db2, or any
                other database are restored
T}
.TE
.sp 1
.PP
Beginning with MySQL Cluster NDB 6\&.3\&.29 and MySQL Cluster NDB 7\&.0\&.10, you can use these two options together\&. For example, the following causes all tables in databases
db1
and
db2, together with the tables
t1
and
t2
in database
db3, to be restored (and no other databases or tables):
.sp
.if n \{\
.RS 4
.\}
.nf
shell> \fBndb_restore [\&.\&.\&.] \-\-include\-databases=db1,db2 \-\-include\-tables=db3\&.t1,db3\&.t2\fR
.fi
.if n \{\
.RE
.\}
.PP
(Again we have omitted other, possibly required, options in the example just shown\&.)
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
Prior to MySQL Cluster NDB 6\&.3\&.29 and MySQL Cluster NDB 7\&.0\&.10, multiple
\fB\-\-include\-*\fR
options were not handled correctly, and the result of the options shown in the previous example was that only the tables
db3\&.t1
and
db3\&.t2
were actually restored\&. (Bug #48907)
.sp .5v
.RE
.PP
.\" ndb_restore: exclude-databases option
.\" exclude-databases option (ndb_restore)
\fB\-\-exclude\-databases=\fR\fB\fIdb_name\fR\fR\fB[,\fR\fB\fIdb_name\fR\fR\fB][,\&.\&.\&.]\fR
.TS
allbox tab(:);
l l s s
l l s s
l l s s
^ l l s
^ l l s.
T{
\fBVersion Introduced\fR
T}:T{
5\&.1\&.31\-ndb\-6\&.3\&.22, 5\&.1\&.32\-ndb\-6\&.4\&.3
T}
T{
\fBCommand\-Line Format\fR
T}:T{
\-\-exclude\-databases=db\-list
T}
T{
\ \&
T}:T{
\fBPermitted Values \fR
T}
:T{
\fBType\fR
T}:T{
string
T}
:T{
\fBDefault\fR
T}:T{
T}
.TE
.sp 1
.PP
.\" ndb_restore: exclude-tables option
.\" exclude-tables option (ndb_restore)
\fB\-\-exclude\-tables=\fR\fB\fIdb_name\&.tbl_name\fR\fR\fB[,\fR\fB\fIdb_name\&.tbl_name\fR\fR\fB][,\&.\&.\&.]\fR
.TS
allbox tab(:);
l l s s
l l s s
l l s s
^ l l s
^ l l s.
T{
\fBVersion Introduced\fR
T}:T{
5\&.1\&.31\-ndb\-6\&.3\&.22, 5\&.1\&.32\-ndb\-6\&.4\&.3
T}
T{
\fBCommand\-Line Format\fR
T}:T{
\-\-exclude\-tables=table\-list
T}
T{
\ \&
T}:T{
\fBPermitted Values \fR
T}
:T{
\fBType\fR
T}:T{
string
T}
:T{
\fBDefault\fR
T}:T{
T}
.TE
.sp 1
.PP
Beginning with MySQL Cluster NDB 6\&.3\&.22 and MySQL Cluster NDB 6\&.4\&.3, it is possible to prevent one or more databases or tables from being restored using the
\fBndb_restore\fR
options
\fB\-\-exclude\-databases\fR
and
\fB\-\-exclude\-tables\fR\&.
\fB\-\-exclude\-databases\fR
takes a comma\-delimited list of one or more databases which should not be restored\&.
\fB\-\-exclude\-tables\fR
takes a comma\-delimited list of one or more tables (using
\fIdatabase\fR\&.\fItable\fR
format) which should not be restored\&.
.PP
When
\fB\-\-exclude\-databases\fR
or
\fB\-\-exclude\-tables\fR
is used, only those databases or tables named by the option are excluded; all other databases and tables are restored by
\fBndb_restore\fR\&.
.PP
This table shows several invocations of
\fBndb_restore\fR
usng
\fB\-\-exclude\-*\fR
options (other options possibly required have been omitted for clarity), and the effects these options have on restoring from a MySQL Cluster backup:
.TS
allbox tab(:);
lB lB.
T{
Option Used
T}:T{
Result
T}
.T&
l l
l l
l l
l l.
T{
\fB\-\-exclude\-databases=db1\fR
T}:T{
All tables in all databases except db1 are restored;
                no tables in db1 are restored
T}
T{
\fB\-\-exclude\-databases=db1,db2\fR (or
                \fB\-\-exclude\-databases=db1\fR
                \fB\-\-exclude\-databases=db2\fR)
T}:T{
All tables in all databases except db1 and
                db2 are restored; no tables in
                db1 or db2 are
                restored
T}
T{
\fB\-\-exclude\-tables=db1\&.t1\fR
T}:T{
All tables except t1 in database
                db1 are restored; all other tables in
                db1 are restored; all tables in all
                other databases are restored
T}
T{
\fB\-\-exclude\-tables=db1\&.t2,db2\&.t1\fR (or
                \fB\-\-exclude\-tables=db1\&.t2\fR
                \fB\-\-exclude\-tables=db2\&.t1)\fR
T}:T{
All tables in database db1 except for
                t2 and all tables in database
                db2 except for table
                t1 are restored; no other tables in
                db1 or db2 are
                restored; all tables in all other databases are restored
T}
.TE
.sp 1
.PP
Beginning with MySQL Cluster NDB 6\&.3\&.29 and MySQL Cluster NDB 7\&.0\&.10, you can use these two options together\&. For example, the following causes all tables in all databases
\fIexcept for\fR
databases
db1
and
db2, along with the tables
t1
and
t2
in database
db3,
\fInot\fR
to be restored:
.sp
.if n \{\
.RS 4
.\}
.nf
shell> \fBndb_restore [\&.\&.\&.] \-\-exclude\-databases=db1,db2 \-\-exclude\-tables=db3\&.t1,db3\&.t2\fR
.fi
.if n \{\
.RE
.\}
.PP
(Again, we have omitted other possibly necessary options in the interest of clarity and brevity from the example just shown\&.)
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
Prior to MySQL Cluster NDB 6\&.3\&.29 and MySQL Cluster NDB 7\&.0\&.10, multiple
\fB\-\-exclude\-*\fR
options were not handled correctly, with the result that the options shown in the previous example caused ndb_restore to exclude only the tables
db3\&.t1
and
db3\&.t2\&. (Bug #48907)
.sp .5v
.RE
.PP
Beginning with MySQL Cluster NDB 6\&.3\&.29 and MySQL Cluster NDB 7\&.0\&.10, you can use
\fB\-\-include\-*\fR
and
\fB\-\-exclude\-*\fR
options together, subject to the following rules:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The actions of all
\fB\-\-include\-*\fR
and
\fB\-\-exclude\-*\fR
options are cumulative\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
All
\fB\-\-include\-*\fR
and
\fB\-\-exclude\-*\fR
options are evaluated in the order passed to ndb_restore, from right to left\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
In the event of conflicting options, the first (rightmost) option takes precedence\&. In other words, the first option (going from right to left) that matches against a given database or table
\(lqwins\(rq\&.
.RE
.PP
For example, the following set of options causes
\fBndb_restore\fR
to restore all tables from database
db1
except
db1\&.t1, while restoring no other tables from any other databases:
.sp
.if n \{\
.RS 4
.\}
.nf
\-\-include\-databases=db1 \-\-exclude\-tables=db1\&.t1
.fi
.if n \{\
.RE
.\}
.PP
However, reversing the order of the options just given simply causes all tables from database
db1
to be restored (including
db1\&.t1, but no tables from any other database), because the
\fB\-\-include\-databases\fR
option, being farthest to the right, is the first match against database
db1
and thus takes precedence over any other option that matches
db1
or any tables in
db1:
.sp
.if n \{\
.RS 4
.\}
.nf
\-\-exclude\-tables=db1\&.t1 \-\-include\-databases=db1
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
Prior to MySQL Cluster NDB 6\&.3\&.29 and MySQL Cluster NDB 7\&.0\&.10, it was not possible to use
\fB\-\-include\-databases\fR
or
\fB\-\-include\-tables\fR
together with
\fB\-\-exclude\-databases\fR
or
\fB\-\-exclude\-tables\fR, as these combinations were evaluated inconsistently\&. (Bug #48907)
.sp .5v
.RE
.PP
.\" ndb_restore: exclude-missing-columns option
.\" exclude-missing-columns option (ndb_restore)
\fB\-\-exclude\-missing\-columns\fR
.TS
allbox tab(:);
l l s s
l l s s.
T{
\fBVersion Introduced\fR
T}:T{
5\&.1\&.35\-ndb\-6\&.3\&.26, 5\&.1\&.35\-ndb\-7\&.0\&.7
T}
T{
\fBCommand\-Line Format\fR
T}:T{
\-\-exclude\-missing\-columns
T}
.TE
.sp 1
.PP
Beginning with MySQL Cluster NDB 6\&.3\&.26 and MySQL Cluster NDB 7\&.0\&.7, it is also possible to restore only selected table columns using the
\fB\-\-exclude\-missing\-columns\fR
option\&. When this option is used,
\fBndb_restore\fR
ignores any columns missing from tables being restored as compared to the versions of those tables found in the backup\&. This option applies to all tables being restored\&. If you wish to apply this option only to selected tables or databases, you can use it in combination with one or more of the options described in the previous paragraph to do so, then restore data to the remaining tables using a complementary set of these options\&.
.PP
.\" ndb_restore: disable-indexes option
.\" disable-indexes option (ndb_restore)
\fB\-\-disable\-indexes\fR
.TS
allbox tab(:);
l l s s
l l s s.
T{
\fBVersion Introduced\fR
T}:T{
5\&.1\&.41\-ndb\-6\&.3\&.31, 5\&.1\&.41\-ndb\-7\&.0\&.11, 5\&.1\&.41\-ndb\-7\&.1\&.2
T}
T{
\fBCommand\-Line Format\fR
T}:T{
\-\-disable\-indexes
T}
.TE
.sp 1
.PP
Beginning with MySQL Cluster NDB 6\&.3\&.31, MySQL Cluster NDB 7\&.0\&.11, and MySQL CLuster NDB 7\&.1\&.2, you can use this option with
\fBndb_restore\fR
to disable restoration of indexes during restoration of the data from a native NDB backup\&. Afterwards, you can restore indexes for all tables at once with multi\-threaded building of indexes using
\fB\-\-rebuild\-indexes\fR, which should be faster than rebuilding indexes concurrently for very large tables\&.
.PP
.\" ndb_restore: rebuild-indexes option
.\" rebuild-indexes option (ndb_restore)
\fB\-\-rebuild\-indexes\fR
.TS
allbox tab(:);
l l s s
l l s s.
T{
\fBVersion Introduced\fR
T}:T{
5\&.1\&.41\-ndb\-6\&.3\&.31, 5\&.1\&.41\-ndb\-7\&.0\&.11, 5\&.1\&.41\-ndb\-7\&.1\&.2
T}
T{
\fBCommand\-Line Format\fR
T}:T{
\-\-rebuild\-indexes
T}
.TE
.sp 1
.PP
Beginning with MySQL Cluster NDB 6\&.3\&.31, MySQL Cluster NDB 7\&.0\&.11, and MySQL CLuster NDB 7\&.1\&.2, you can use this option with
\fBndb_restore\fR
to cause multi\-threaded rebuilding of the ordered indexes while restoring a native
NDB
backup\&.
.PP
.\" ndb_restore: skip-broken-objects option
.\" skip-broken-objects option (ndb_restore)
\fB\-\-skip\-broken\-objects\fR
.TS
allbox tab(:);
l l s s
l l s s.
T{
\fBVersion Introduced\fR
T}:T{
5\&.1\&.51\-ndb\-6\&.3\&.40, 5\&.1\&.51\-ndb\-7\&.0\&.21, 5\&.1\&.51\-ndb\-7\&.1\&.10
T}
T{
\fBCommand\-Line Format\fR
T}:T{
\-\-skip\-broken\-objects
T}
.TE
.sp 1
.PP
This option causes
\fBndb_restore\fR
to ignore corrupt tables while reading a native
NDB
backup, and to continue restoring any remaining tables (that are not also corrupted)\&. Currently, the
\fB\-\-skip\-broken\-objects\fR
option works only in the case of missing blob parts tables\&.
.PP
This option was added in MySQL Cluster NDB 6\&.3\&.40, MySQL Cluster NDB 7\&.0\&.21, and MySQL CLuster NDB 7\&.1\&.10\&.
.PP
.\" ndb_restore: skip-unknown-objects option
.\" skip-unknown-objects option (ndb_restore)
\fB\-\-skip\-unknown\-objects\fR
.TS
allbox tab(:);
l l s s
l l s s.
T{
\fBVersion Introduced\fR
T}:T{
5\&.1\&.41\-ndb\-6\&.3\&.34, 5\&.1\&.41\-ndb\-7\&.0\&.15, 5\&.1\&.41\-ndb\-7\&.1\&.4
T}
T{
\fBCommand\-Line Format\fR
T}:T{
\-\-skip\-unknown\-objects
T}
.TE
.sp 1
.PP
This option causes
\fBndb_restore\fR
to ignore any schema objects it does not recognize while reading a native
NDB
backup\&. This can be used for restoring a backup made from a cluster running MySQL Cluster NDB 7\&.0 to a cluster running MySQL Cluster NDB 6\&.3\&.
.PP
This option was added in MySQL Cluster NDB 6\&.3\&.34, MySQL Cluster NDB 7\&.0\&.15, and MySQL CLuster NDB 7\&.1\&.4\&.
.PP
.\" ndb_restore: rewrite-database option
.\" rewrite-database option (ndb_restore)
\fB\-\-rewrite\-database=\fR\fB\fIold_dbname\fR\fR\fB,\fR\fB\fInew_dbname\fR\fR
.TS
allbox tab(:);
l l s s
l l s s
l l s s
^ l l s
^ l l s.
T{
\fBVersion Introduced\fR
T}:T{
5\&.1\&.51\-ndb\-6\&.3\&.41, 5\&.1\&.51\-ndb\-7\&.0\&.22, 5\&.1\&.51\-ndb\-7\&.1\&.11
T}
T{
\fBCommand\-Line Format\fR
T}:T{
\-\-rewrite\-database=olddb,newdb
T}
T{
\ \&
T}:T{
\fBPermitted Values \fR
T}
:T{
\fBType\fR
T}:T{
string
T}
:T{
\fBDefault\fR
T}:T{
none
T}
.TE
.sp 1
.PP
This option makes it possible to restore to a database having a different name from that used in the backup\&. For example, if a backup is made of a database named
products, you can restore the data it contains to a database named
inventory, use this option as shown here (omitting any other options that might be required):
.sp
.if n \{\
.RS 4
.\}
.nf
shell> ndb_restore \-\-rewrite\-database=product,inventory
.fi
.if n \{\
.RE
.\}
.PP
The option can be employed multiple times in a single invocation of
\fBndb_restore\fR\&. Thus it is possible to restore simultaneously from a database named
db1
to a database named
db2
and from a database named
db3
to one named
db4
using
\fB\-\-rewrite\-database=db1,db2 \-\-rewrite\-database=db3,db4\fR\&. Other
\fBndb_restore\fR
options may be used between multiple occurrences of
\fB\-\-rewrite\-database\fR\&.
.PP
In the event of conflicts between multiple
\fB\-\-rewrite\-database\fR
options, the last
\fB\-\-rewrite\-database\fR
option used, reading from left to right, is the one that takes effect\&. For example, if
\fB\-\-rewrite\-database=db1,db2 \-\-rewrite\-database=db1,db3\fR
is used, only
\fB\-\-rewrite\-database=db1,db3\fR
is honored, and
\fB\-\-rewrite\-database=db1,db2\fR
is ignored\&. It is also possible to restore from multiple databases to a single database, so that
\fB\-\-rewrite\-database=db1,db3 \-\-rewrite\-database=db2,db3\fR
restores all tables and data from databases
db1
and
db2
into database
db3\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBImportant\fR
.ps -1
.br
.PP
When restoring from multiple backup databases into a single target database using
\fB\-\-rewrite\-database\fR, no check is made for collisions between table or other object names, and the order in which rows are restored is not guaranteed\&. This means that it is possible in such cases for rows to be overwritten and updates to be lost\&.
.sp .5v
.RE
.PP
This option was added in MySQL Cluster NDB 6\&.3\&.41, MySQL Cluster NDB 7\&.0\&.22, and MySQL Cluster NDB 7\&.1\&.11\&.
.PP
\fBError reporting\fR. .\" ndb_restore: errors
\fBndb_restore\fR
reports both temporary and permanent errors\&. In the case of temporary errors, it may able to recover from them\&. Beginning with MySQL 5\&.1\&.12, it reports
Restore successful, but encountered temporary error, please look at configuration
in such cases\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBImportant\fR
.ps -1
.br
.PP
After using
\fBndb_restore\fR
to initialize a MySQL Cluster for use in circular replication, binary logs on the SQL node acting as the replication slave are not automatically created, and you must cause them to be created manually\&. To cause the binary logs to be created, issue a
SHOW TABLES
statement on that SQL node before running
START SLAVE\&. This is a known issue in MySQL Cluster\&.
.sp .5v
.RE
.SH "COPYRIGHT"
.br
.PP
Copyright \(co 1997, 2012, Oracle and/or its affiliates. All rights reserved.
.PP
This documentation is free software; you can redistribute it and/or modify it only under the terms of the GNU General Public License as published by the Free Software Foundation; version 2 of the License.
.PP
This documentation is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
.PP
You should have received a copy of the GNU General Public License along with the program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or see http://www.gnu.org/licenses/.
.sp
.SH "SEE ALSO"
For more information, please refer to the MySQL Reference Manual,
which may already be installed locally and which is also available
online at http://dev.mysql.com/doc/.
.SH AUTHOR
Oracle Corporation (http://dev.mysql.com/).

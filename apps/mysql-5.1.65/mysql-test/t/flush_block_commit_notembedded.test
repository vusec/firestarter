# Let's see if FLUSH TABLES WITH READ LOCK blocks COMMIT of existing
# transactions.
# We verify that we did not introduce a deadlock.
# This is intended to mimick how mysqldump and innobackup work.

--source include/have_log_bin.inc

# And it requires InnoDB
--source include/have_log_bin.inc
--source include/have_innodb.inc

# Save the initial number of concurrent sessions
--source include/count_sessions.inc


--echo # Establish connection con1 (user=root)
connect (con1,localhost,root,,);
--echo # Establish connection con2 (user=root)
connect (con2,localhost,root,,);

# FLUSH TABLES WITH READ LOCK should block writes to binlog too
--echo # Switch to connection con1
connection con1;
CREATE TABLE t1 (a INT) ENGINE=innodb;
RESET MASTER;
SET AUTOCOMMIT=0;
INSERT t1 VALUES (1);
--echo # Switch to connection con2
connection con2;
FLUSH TABLES WITH READ LOCK;
--source include/show_binlog_events.inc
--echo # Switch to connection con1
connection con1;
send COMMIT;
--echo # Switch to connection con2
connection con2;
sleep 1;
--source include/show_binlog_events.inc
UNLOCK TABLES;
--echo # Switch to connection con1
connection con1;
reap;
DROP TABLE t1;
SET AUTOCOMMIT=1;

--echo # Switch to connection default and close connections con1 and con2
connection default;
disconnect con1;
disconnect con2;

# Wait till all disconnects are completed
--source include/wait_until_count_sessions.inc


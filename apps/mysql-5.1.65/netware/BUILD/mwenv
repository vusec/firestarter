#! /bin/sh

if test ! -r ./sql/mysqld.cc
then
  echo "you must start from the top source directory"
  exit 1
fi

# The base path(in wineformat) where compilers, includes and
# libraries are installed
if test -z "$MYDEV"
then
  # the default is "F:/mydev"
  export MYDEV="F:/mydev"
fi
echo "MYDEV: $MYDEV"

# Get current dir
BUILD_DIR=`pwd`
echo "BUILD_DIR: $BUILD_DIR"

# Get current dir in wine format
base=`echo $MYDEV  |sed 's/\/.*//'`
base_unix_part=`winepath -- -u $base/`
WINE_BUILD_DIR=`echo "$BUILD_DIR" | sed 's_'$base_unix_part'/__'`
WINE_BUILD_DIR="$base/$WINE_BUILD_DIR"
echo "WINE_BUILD_DIR: $WINE_BUILD_DIR"

# Look for libc, MySQL 5.1.x uses libc-2006 by default
libc_dir="$MYDEV/libc-2006"
if [ ! -d `winepath $libc_dir` ]
then
  # The libcdir didn't exist, set default
  libc_dir="$MYDEV/libc"
fi
echo "Using libc in $libc_dir";

export MWCNWx86Includes="$libc_dir/include;$MYDEV/fs64/headers;$MYDEV/zlib-1.2.3;$WINE_BUILD_DIR/include;$MYDEV"
export MWNWx86Libraries="$libc_dir/imports;$MYDEV/mw/lib;$MYDEV/fs64/imports;$MYDEV/zlib-1.2.3;$MYDEV/openssl;$WINE_BUILD_DIR/netware/BUILD"
export MWNWx86LibraryFiles="libcpre.o;libc.imp;netware.imp;mwcrtl.lib;mwcpp.lib;libz.a;neb.imp;zPublics.imp;knetware.imp"

export WINEPATH="$MYDEV/mw/bin"

# the default added path is "$BUILD_DIR/netware/BUILD"
export PATH="$PATH:$BUILD_DIR/netware/BUILD"

export AR='mwldnlm'
export AR_FLAGS='-type library -o'
export AS='mwasmnlm'
export CC='mwccnlm -gccincludes'
export CFLAGS='-enum int -align 8 -proc 686 -relax_pointers -dialect c'
export CXX='mwccnlm -gccincludes'
export CXXFLAGS='-enum int -align 8 -proc 686 -relax_pointers -dialect c++ -bool on -wchar_t on -D_WCHAR_T'
export LD='mwldnlm'
export LDFLAGS='-entry _LibCPrelude -exit _LibCPostlude -map -flags pseudopreemption'
export RANLIB=:
export STRIP=:

#
# Check that TERM has been set to avoid problem "Error opening
# terminal: unknown" when the script is executed using non interactive ssh
#
if test -z "$TERM" -o "$TERM"=dumb
then
  export TERM=linux
fi

# Temporary hack to allow building from source dist
if [ "$USER"=pushbuild ]
then
  export ARFLAGS=$AR_FLAGS
fi

# Print all env. variables
export

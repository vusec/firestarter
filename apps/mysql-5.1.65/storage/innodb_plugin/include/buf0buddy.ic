/*****************************************************************************

Copyright (c) 2006, 2011, Oracle and/or its affiliates. All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; version 2 of the License.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

*****************************************************************************/

/**************************************************//**
@file include/buf0buddy.ic
Binary buddy allocator for compressed pages

Created December 2006 by Marko Makela
*******************************************************/

#ifdef UNIV_MATERIALIZE
# undef UNIV_INLINE
# define UNIV_INLINE
#endif

#include "buf0buf.h"
#include "buf0buddy.h"
#include "ut0ut.h"
#include "sync0sync.h"

/**********************************************************************//**
Allocate a block.  The thread calling this function must hold
buf_pool_mutex and must not hold buf_pool_zip_mutex or any block->mutex.
The buf_pool_mutex may be released and reacquired.
@return	allocated block, never NULL */
UNIV_INTERN
void*
buf_buddy_alloc_low(
/*================*/
	ulint	i,	/*!< in: index of buf_pool->zip_free[],
			or BUF_BUDDY_SIZES */
	ibool*	lru)	/*!< in: pointer to a variable that will be assigned
			TRUE if storage was allocated from the LRU list
			and buf_pool_mutex was temporarily released */
	__attribute__((malloc, nonnull));

/**********************************************************************//**
Deallocate a block. */
UNIV_INTERN
void
buf_buddy_free_low(
/*===============*/
	void*	buf,	/*!< in: block to be freed, must not be
			pointed to by the buffer pool */
	ulint	i)	/*!< in: index of buf_pool->zip_free[],
			or BUF_BUDDY_SIZES */
	__attribute__((nonnull));

/**********************************************************************//**
Get the index of buf_pool->zip_free[] for a given block size.
@return	index of buf_pool->zip_free[], or BUF_BUDDY_SIZES */
UNIV_INLINE
ulint
buf_buddy_get_slot(
/*===============*/
	ulint	size)	/*!< in: block size */
{
	ulint	i;
	ulint	s;

	ut_ad(size >= PAGE_ZIP_MIN_SIZE);

	for (i = 0, s = BUF_BUDDY_LOW; s < size; i++, s <<= 1) {
	}

	ut_ad(i <= BUF_BUDDY_SIZES);
	return(i);
}

/**********************************************************************//**
Allocate a block.  The thread calling this function must hold
buf_pool_mutex and must not hold buf_pool_zip_mutex or any
block->mutex.  The buf_pool_mutex may be released and reacquired.
This function should only be used for allocating compressed page frames.
@return	allocated block, never NULL */
UNIV_INLINE
void*
buf_buddy_alloc(
/*============*/
	ulint	size,	/*!< in: compressed page size
			(between PAGE_ZIP_MIN_SIZE and UNIV_PAGE_SIZE) */
	ibool*	lru)	/*!< in: pointer to a variable that will be assigned
			TRUE if storage was allocated from the LRU list
			and buf_pool_mutex was temporarily released */
{
	ut_ad(buf_pool_mutex_own());
	ut_ad(ut_is_2pow(size));
	ut_ad(size >= PAGE_ZIP_MIN_SIZE);
	ut_ad(size <= UNIV_PAGE_SIZE);

	return((byte*) buf_buddy_alloc_low(buf_buddy_get_slot(size), lru));
}

/**********************************************************************//**
Deallocate a block. */
UNIV_INLINE
void
buf_buddy_free(
/*===========*/
	void*	buf,	/*!< in: block to be freed, must not be
			pointed to by the buffer pool */
	ulint	size)	/*!< in: block size, up to UNIV_PAGE_SIZE */
{
	ut_ad(buf_pool_mutex_own());
	ut_ad(ut_is_2pow(size));
	ut_ad(size >= PAGE_ZIP_MIN_SIZE);
	ut_ad(size <= UNIV_PAGE_SIZE);

	buf_buddy_free_low(buf, buf_buddy_get_slot(size));
}

#ifdef UNIV_MATERIALIZE
# undef UNIV_INLINE
# define UNIV_INLINE	UNIV_INLINE_ORIGINAL
#endif

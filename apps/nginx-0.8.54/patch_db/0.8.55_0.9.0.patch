diff -p -N --text -r /tmp/patch.inc.get1.rVbhOp/src/core/nginx.c /tmp/patch.inc.get2.mWA3bo/src/core/nginx.c
*** /tmp/patch.inc.get1.rVbhOp/src/core/nginx.c	2013-04-29 23:58:09.649843763 +0200
--- /tmp/patch.inc.get2.mWA3bo/src/core/nginx.c	2013-04-29 23:58:12.865859704 +0200
*************** main(int argc, char *const *argv)
*** 203,208 ****
--- 203,212 ----
      ngx_cycle_t      *cycle, init_cycle;
      ngx_core_conf_t  *ccf;
  
+     if (ngx_strerror_init() != NGX_OK) {
+         return 1;
+     }
+ 
      if (ngx_get_options(argc, argv) != NGX_OK) {
          return 1;
      }
diff -p -N --text -r /tmp/patch.inc.get1.rVbhOp/src/core/nginx.h /tmp/patch.inc.get2.mWA3bo/src/core/nginx.h
*** /tmp/patch.inc.get1.rVbhOp/src/core/nginx.h	2013-04-29 23:58:09.649843763 +0200
--- /tmp/patch.inc.get2.mWA3bo/src/core/nginx.h	2013-04-29 23:58:12.865859704 +0200
***************
*** 8,15 ****
  #define _NGINX_H_INCLUDED_
  
  
! #define nginx_version         8055
! #define NGINX_VERSION      "0.8.55"
  #define NGINX_VER          "nginx/" NGINX_VERSION
  
  #define NGINX_VAR          "NGINX"
--- 8,15 ----
  #define _NGINX_H_INCLUDED_
  
  
! #define nginx_version         9000
! #define NGINX_VERSION      "0.9.0"
  #define NGINX_VER          "nginx/" NGINX_VERSION
  
  #define NGINX_VAR          "NGINX"
diff -p -N --text -r /tmp/patch.inc.get1.rVbhOp/src/core/ngx_log.c /tmp/patch.inc.get2.mWA3bo/src/core/ngx_log.c
*** /tmp/patch.inc.get1.rVbhOp/src/core/ngx_log.c	2013-04-29 23:58:09.653843780 +0200
--- /tmp/patch.inc.get2.mWA3bo/src/core/ngx_log.c	2013-04-29 23:58:12.865859704 +0200
*************** ngx_log_error_core(ngx_uint_t level, ngx
*** 148,156 ****
          return;
      }
  
!     msg -= (err_levels[level].len + 4);
  
!     (void) ngx_sprintf(msg, "[%V]: ", &err_levels[level]);
  
      (void) ngx_write_console(ngx_stderr, msg, p - msg);
  }
--- 148,156 ----
          return;
      }
  
!     msg -= (7 + err_levels[level].len + 4);
  
!     (void) ngx_sprintf(msg, "nginx: [%V]: ", &err_levels[level]);
  
      (void) ngx_write_console(ngx_stderr, msg, p - msg);
  }
*************** ngx_log_stderr(ngx_err_t err, const char
*** 209,217 ****
      u_char    errstr[NGX_MAX_ERROR_STR];
  
      last = errstr + NGX_MAX_ERROR_STR;
  
      va_start(args, fmt);
!     p = ngx_vslprintf(errstr, last, fmt, args);
      va_end(args);
  
      if (err) {
--- 209,220 ----
      u_char    errstr[NGX_MAX_ERROR_STR];
  
      last = errstr + NGX_MAX_ERROR_STR;
+     p = errstr + 7;
+ 
+     ngx_memcpy(errstr, "nginx: ", 7);
  
      va_start(args, fmt);
!     p = ngx_vslprintf(p, last, fmt, args);
      va_end(args);
  
      if (err) {
*************** ngx_log_errno(u_char *buf, u_char *last,
*** 248,254 ****
      buf = ngx_slprintf(buf, last, " (%d: ", err);
  #endif
  
!     buf = ngx_strerror_r(err, buf, last - buf);
  
      if (buf < last) {
          *buf++ = ')';
--- 251,257 ----
      buf = ngx_slprintf(buf, last, " (%d: ", err);
  #endif
  
!     buf = ngx_strerror(err, buf, last - buf);
  
      if (buf < last) {
          *buf++ = ')';
diff -p -N --text -r /tmp/patch.inc.get1.rVbhOp/src/event/ngx_event_accept.c /tmp/patch.inc.get2.mWA3bo/src/event/ngx_event_accept.c
*** /tmp/patch.inc.get1.rVbhOp/src/event/ngx_event_accept.c	2013-04-29 23:58:09.649843763 +0200
--- /tmp/patch.inc.get2.mWA3bo/src/event/ngx_event_accept.c	2013-04-29 23:58:12.861859688 +0200
*************** ngx_event_accept(ngx_event_t *ev)
*** 46,52 ****
--- 46,56 ----
      do {
          socklen = NGX_SOCKADDRLEN;
  
+ #if (NGX_HAVE_ACCEPT4)
+         s = accept4(lc->fd, (struct sockaddr *) sa, &socklen, SOCK_NONBLOCK);
+ #else
          s = accept(lc->fd, (struct sockaddr *) sa, &socklen);
+ #endif
  
          if (s == -1) {
              err = ngx_socket_errno;
diff -p -N --text -r /tmp/patch.inc.get1.rVbhOp/src/http/modules/ngx_http_degradation_module.c /tmp/patch.inc.get2.mWA3bo/src/http/modules/ngx_http_degradation_module.c
*** /tmp/patch.inc.get1.rVbhOp/src/http/modules/ngx_http_degradation_module.c	2013-04-29 23:58:09.645843739 +0200
--- /tmp/patch.inc.get2.mWA3bo/src/http/modules/ngx_http_degradation_module.c	2013-04-29 23:58:12.861859688 +0200
*************** ngx_module_t  ngx_http_degradation_modul
*** 86,94 ****
  };
  
  
- static ngx_uint_t  ngx_degraded;
- 
- 
  static ngx_int_t
  ngx_http_degradation_handler(ngx_http_request_t *r)
  {
--- 86,91 ----
*************** ngx_http_degraded(ngx_http_request_t *r)
*** 139,146 ****
          /* unlock mutex */
  
          if (sbrk_size >= dmcf->sbrk_size) {
-             ngx_degraded = 1;
- 
              if (log) {
                  ngx_log_error(NGX_LOG_NOTICE, r->connection->log, 0,
                                "degradation sbrk:%uzM",
--- 136,141 ----
*************** ngx_http_degraded(ngx_http_request_t *r)
*** 151,158 ****
          }
      }
  
-     ngx_degraded = 0;
- 
      return 0;
  }
  
--- 146,151 ----
diff -p -N --text -r /tmp/patch.inc.get1.rVbhOp/src/http/modules/ngx_http_map_module.c /tmp/patch.inc.get2.mWA3bo/src/http/modules/ngx_http_map_module.c
*** /tmp/patch.inc.get1.rVbhOp/src/http/modules/ngx_http_map_module.c	2013-04-29 23:58:09.645843739 +0200
--- /tmp/patch.inc.get2.mWA3bo/src/http/modules/ngx_http_map_module.c	2013-04-29 23:58:12.861859688 +0200
*************** typedef struct {
*** 19,33 ****
      ngx_hash_keys_arrays_t      keys;
  
      ngx_array_t                *values_hash;
  
      ngx_http_variable_value_t  *default_value;
      ngx_uint_t                  hostnames;      /* unsigned  hostnames:1 */
  } ngx_http_map_conf_ctx_t;
  
  
  typedef struct {
      ngx_hash_combined_t         hash;
!     ngx_int_t                   index;
      ngx_http_variable_value_t  *default_value;
      ngx_uint_t                  hostnames;      /* unsigned  hostnames:1 */
  } ngx_http_map_ctx_t;
--- 19,35 ----
      ngx_hash_keys_arrays_t      keys;
  
      ngx_array_t                *values_hash;
+     ngx_array_t                 var_values;
  
      ngx_http_variable_value_t  *default_value;
+     ngx_conf_t                 *cf;
      ngx_uint_t                  hostnames;      /* unsigned  hostnames:1 */
  } ngx_http_map_conf_ctx_t;
  
  
  typedef struct {
      ngx_hash_combined_t         hash;
!     ngx_http_complex_value_t    value;
      ngx_http_variable_value_t  *default_value;
      ngx_uint_t                  hostnames;      /* unsigned  hostnames:1 */
  } ngx_http_map_ctx_t;
*************** ngx_http_map_variable(ngx_http_request_t
*** 105,153 ****
      ngx_http_map_ctx_t  *map = (ngx_http_map_ctx_t *) data;
  
      size_t                      len;
!     u_char                     *name;
      ngx_uint_t                  key;
!     ngx_http_variable_value_t  *vv, *value;
  
      ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                     "http map started");
  
!     vv = ngx_http_get_flushed_variable(r, map->index);
! 
!     if (vv == NULL || vv->not_found) {
!         *v = *map->default_value;
!         return NGX_OK;
      }
  
!     len = vv->len;
  
!     if (len && map->hostnames && vv->data[len - 1] == '.') {
          len--;
      }
  
!     if (len == 0) {
!         *v = *map->default_value;
!         return NGX_OK;
!     }
! 
!     name = ngx_pnalloc(r->pool, len);
!     if (name == NULL) {
!         return NGX_ERROR;
!     }
  
!     key = ngx_hash_strlow(name, vv->data, len);
  
!     value = ngx_hash_find_combined(&map->hash, key, name, len);
  
!     if (value) {
!         *v = *value;
  
!     } else {
!         *v = *map->default_value;
      }
  
      ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
!                    "http map: \"%v\" \"%v\"", vv, v);
  
      return NGX_OK;
  }
--- 107,149 ----
      ngx_http_map_ctx_t  *map = (ngx_http_map_ctx_t *) data;
  
      size_t                      len;
!     ngx_str_t                   val;
      ngx_uint_t                  key;
!     ngx_http_variable_value_t  *value;
  
      ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                     "http map started");
  
!     if (ngx_http_complex_value(r, &map->value, &val) != NGX_OK) {
!         return NGX_ERROR;
      }
  
!     len = val.len;
  
!     if (len && map->hostnames && val.data[len - 1] == '.') {
          len--;
      }
  
!     key = ngx_hash_strlow(val.data, val.data, len);
  
!     value = ngx_hash_find_combined(&map->hash, key, val.data, len);
  
!     if (value == NULL) {
!         value = map->default_value;
!     }
  
!     if (!value->valid) {
!         value = ngx_http_get_flushed_variable(r, (ngx_uint_t) value->data);
  
!         if (value == NULL || value->not_found) {
!             value = &ngx_http_variable_null_value;
!         }
      }
  
+     *v = *value;
+ 
      ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
!                    "http map: \"%v\" \"%v\"", &val, v);
  
      return NGX_OK;
  }
*************** ngx_http_map_block(ngx_conf_t *cf, ngx_c
*** 175,188 ****
  {
      ngx_http_map_conf_t  *mcf = conf;
  
!     char                      *rv;
!     ngx_str_t                 *value, name;
!     ngx_conf_t                 save;
!     ngx_pool_t                *pool;
!     ngx_hash_init_t            hash;
!     ngx_http_map_ctx_t        *map;
!     ngx_http_variable_t       *var;
!     ngx_http_map_conf_ctx_t    ctx;
  
      if (mcf->hash_max_size == NGX_CONF_UNSET_UINT) {
          mcf->hash_max_size = 2048;
--- 171,185 ----
  {
      ngx_http_map_conf_t  *mcf = conf;
  
!     char                              *rv;
!     ngx_str_t                         *value, name;
!     ngx_conf_t                         save;
!     ngx_pool_t                        *pool;
!     ngx_hash_init_t                    hash;
!     ngx_http_map_ctx_t                *map;
!     ngx_http_variable_t               *var;
!     ngx_http_map_conf_ctx_t            ctx;
!     ngx_http_compile_complex_value_t   ccv;
  
      if (mcf->hash_max_size == NGX_CONF_UNSET_UINT) {
          mcf->hash_max_size = 2048;
*************** ngx_http_map_block(ngx_conf_t *cf, ngx_c
*** 203,215 ****
  
      value = cf->args->elts;
  
!     name = value[1];
!     name.len--;
!     name.data++;
  
!     map->index = ngx_http_get_variable_index(cf, &name);
  
!     if (map->index == NGX_ERROR) {
          return NGX_CONF_ERROR;
      }
  
--- 200,212 ----
  
      value = cf->args->elts;
  
!     ngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));
  
!     ccv.cf = cf;
!     ccv.value = &value[1];
!     ccv.complex_value = &map->value;
  
!     if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
          return NGX_CONF_ERROR;
      }
  
*************** ngx_http_map_block(ngx_conf_t *cf, ngx_c
*** 244,250 ****
--- 241,256 ----
          return NGX_CONF_ERROR;
      }
  
+     if (ngx_array_init(&ctx.var_values, cf->pool, 2,
+                        sizeof(ngx_http_variable_value_t))
+         != NGX_OK)
+     {
+         ngx_destroy_pool(pool);
+         return NGX_CONF_ERROR;
+     }
+ 
      ctx.default_value = NULL;
+     ctx.cf = &save;
      ctx.hostnames = 0;
  
      save = *cf;
*************** ngx_http_map_cmp_dns_wildcards(const voi
*** 344,351 ****
  static char *
  ngx_http_map(ngx_conf_t *cf, ngx_command_t *dummy, void *conf)
  {
!     ngx_int_t                   rc;
!     ngx_str_t                  *value, file;
      ngx_uint_t                  i, key;
      ngx_http_map_conf_ctx_t    *ctx;
      ngx_http_variable_value_t  *var, **vp;
--- 350,357 ----
  static char *
  ngx_http_map(ngx_conf_t *cf, ngx_command_t *dummy, void *conf)
  {
!     ngx_int_t                   rc, index;
!     ngx_str_t                  *value, file, name;
      ngx_uint_t                  i, key;
      ngx_http_map_conf_ctx_t    *ctx;
      ngx_http_variable_value_t  *var, **vp;
*************** ngx_http_map(ngx_conf_t *cf, ngx_command
*** 364,374 ****
          ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                             "invalid number of the map parameters");
          return NGX_CONF_ERROR;
- 
-     } else if (value[0].len == 0) {
-         ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
-                            "invalid first parameter");
-         return NGX_CONF_ERROR;
      }
  
      if (ngx_strcmp(value[0].data, "include") == 0) {
--- 370,375 ----
*************** ngx_http_map(ngx_conf_t *cf, ngx_command
*** 383,388 ****
--- 384,428 ----
          return ngx_conf_parse(cf, &file);
      }
  
+     if (value[1].data[0] == '$') {
+         name = value[1];
+         name.len--;
+         name.data++;
+ 
+         index = ngx_http_get_variable_index(ctx->cf, &name);
+         if (index == NGX_ERROR) {
+             return NGX_CONF_ERROR;
+         }
+ 
+         var = ctx->var_values.elts;
+ 
+         for (i = 0; i < ctx->var_values.nelts; i++) {
+             if (index == (ngx_int_t) var[i].data) {
+                 goto found;
+             }
+         }
+ 
+         var = ngx_palloc(ctx->keys.pool, sizeof(ngx_http_variable_value_t));
+         if (var == NULL) {
+             return NGX_CONF_ERROR;
+         }
+ 
+         var->valid = 0;
+         var->no_cacheable = 0;
+         var->not_found = 0;
+         var->len = 0;
+         var->data = (u_char *) index;
+ 
+         vp = ngx_array_push(&ctx->var_values);
+         if (vp == NULL) {
+             return NGX_CONF_ERROR;
+         }
+ 
+         *vp = var;
+ 
+         goto found;
+     }
+ 
      key = 0;
  
      for (i = 0; i < value[1].len; i++) {
*************** found:
*** 451,457 ****
          return NGX_CONF_OK;
      }
  
!     if (value[0].len && value[0].data[0] == '!') {
          value[0].len--;
          value[0].data++;
      }
--- 491,497 ----
          return NGX_CONF_OK;
      }
  
!     if (value[0].len && value[0].data[0] == '\\') {
          value[0].len--;
          value[0].data++;
      }
diff -p -N --text -r /tmp/patch.inc.get1.rVbhOp/src/http/ngx_http.c /tmp/patch.inc.get2.mWA3bo/src/http/ngx_http.c
*** /tmp/patch.inc.get1.rVbhOp/src/http/ngx_http.c	2013-04-29 23:58:09.645843739 +0200
--- /tmp/patch.inc.get2.mWA3bo/src/http/ngx_http.c	2013-04-29 23:58:12.861859688 +0200
*************** ngx_http_add_addrs6(ngx_conf_t *cf, ngx_
*** 1870,1881 ****
          if (addr[i].hash.buckets == NULL
              && (addr[i].wc_head == NULL
                  || addr[i].wc_head->hash.buckets == NULL)
!             && (addr[i].wc_tail == NULL
!                 || addr[i].wc_tail->hash.buckets == NULL)
! #if (NGX_PCRE)
!             && addr[i].nregex == 0
! #endif
!             )
          {
              continue;
          }
--- 1870,1877 ----
          if (addr[i].hash.buckets == NULL
              && (addr[i].wc_head == NULL
                  || addr[i].wc_head->hash.buckets == NULL)
!             && (addr[i].wc_head == NULL
!                 || addr[i].wc_head->hash.buckets == NULL))
          {
              continue;
          }
diff -p -N --text -r /tmp/patch.inc.get1.rVbhOp/src/http/ngx_http_core_module.c /tmp/patch.inc.get2.mWA3bo/src/http/ngx_http_core_module.c
*** /tmp/patch.inc.get1.rVbhOp/src/http/ngx_http_core_module.c	2013-04-29 23:58:09.649843763 +0200
--- /tmp/patch.inc.get2.mWA3bo/src/http/ngx_http_core_module.c	2013-04-29 23:58:12.861859688 +0200
*************** static ngx_conf_enum_t  ngx_http_core_if
*** 133,138 ****
--- 133,146 ----
  };
  
  
+ static ngx_conf_enum_t  ngx_http_core_keepalive_disable[] = {
+     { ngx_string("none"), NGX_HTTP_KEEPALIVE_DISABLE_NONE },
+     { ngx_string("msie6"), NGX_HTTP_KEEPALIVE_DISABLE_MSIE6 },
+     { ngx_string("safari"), NGX_HTTP_KEEPALIVE_DISABLE_SAFARI },
+     { ngx_null_string, 0 }
+ };
+ 
+ 
  static ngx_path_init_t  ngx_http_client_temp_path = {
      ngx_string(NGX_HTTP_CLIENT_TEMP_PATH), { 0, 0, 0 }
  };
*************** static ngx_command_t  ngx_http_core_comm
*** 494,499 ****
--- 502,514 ----
        offsetof(ngx_http_core_loc_conf_t, keepalive_requests),
        NULL },
  
+     { ngx_string("keepalive_disable"),
+       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+       ngx_conf_set_enum_slot,
+       NGX_HTTP_LOC_CONF_OFFSET,
+       offsetof(ngx_http_core_loc_conf_t, keepalive_disable),
+       &ngx_http_core_keepalive_disable },
+ 
      { ngx_string("satisfy"),
        NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
        ngx_conf_set_enum_slot,
*************** ngx_http_handler(ngx_http_request_t *r)
*** 790,815 ****
              break;
          }
  
-         if (r->keepalive) {
- 
-             if (r->headers_in.msie6) {
-                 if (r->method == NGX_HTTP_POST) {
-                     /*
-                      * MSIE may wait for some time if an response for
-                      * a POST request was sent over a keepalive connection
-                      */
-                     r->keepalive = 0;
-                 }
- 
-             } else if (r->headers_in.safari) {
-                 /*
-                  * Safari may send a POST request to a closed keepalive
-                  * connection and stalls for some time
-                  */
-                 r->keepalive = 0;
-             }
-         }
- 
          if (r->headers_in.content_length_n > 0) {
              r->lingering_close = 1;
  
--- 805,810 ----
*************** ngx_http_core_rewrite_phase(ngx_http_req
*** 905,910 ****
--- 900,910 ----
  
      rc = ph->handler(r);
  
+     if (rc == NGX_OK) {
+         r->phase_handler = ph->next;
+         return NGX_AGAIN;
+     }
+ 
      if (rc == NGX_DECLINED) {
          r->phase_handler++;
          return NGX_AGAIN;
*************** ngx_http_core_rewrite_phase(ngx_http_req
*** 914,920 ****
          return NGX_OK;
      }
  
!     /* NGX_OK, NGX_AGAIN, NGX_ERROR, NGX_HTTP_...  */
  
      ngx_http_finalize_request(r, rc);
  
--- 914,920 ----
          return NGX_OK;
      }
  
!     /* NGX_AGAIN || rc == NGX_ERROR || rc == NGX_HTTP_...  */
  
      ngx_http_finalize_request(r, rc);
  
*************** ngx_http_update_location_config(ngx_http
*** 1436,1441 ****
--- 1436,1463 ----
  
          } else if (r->connection->requests >= clcf->keepalive_requests) {
              r->keepalive = 0;
+ 
+         } else if (r->headers_in.msie6
+                    && r->method == NGX_HTTP_POST
+                    && (clcf->keepalive_disable
+                        & NGX_HTTP_KEEPALIVE_DISABLE_MSIE6))
+         {
+             /*
+              * MSIE may wait for some time if an response for
+              * a POST request was sent over a keepalive connection
+              */
+             r->keepalive = 0;
+ 
+         } else if (r->headers_in.safari
+                    && (clcf->keepalive_disable
+                        & NGX_HTTP_KEEPALIVE_DISABLE_SAFARI))
+         {
+             /*
+              * Safari may send a POST request to a closed keepalive
+              * connection and may stall for some time, see
+              *     https://bugs.webkit.org/show_bug.cgi?id=5760
+              */
+             r->keepalive = 0;
          }
      }
  
*************** ngx_http_core_create_loc_conf(ngx_conf_t
*** 3065,3070 ****
--- 3087,3093 ----
      clcf->client_max_body_size = NGX_CONF_UNSET;
      clcf->client_body_buffer_size = NGX_CONF_UNSET_SIZE;
      clcf->client_body_timeout = NGX_CONF_UNSET_MSEC;
+     clcf->keepalive_disable = NGX_CONF_UNSET_UINT;
      clcf->satisfy = NGX_CONF_UNSET_UINT;
      clcf->if_modified_since = NGX_CONF_UNSET_UINT;
      clcf->client_body_in_file_only = NGX_CONF_UNSET_UINT;
*************** ngx_http_core_merge_loc_conf(ngx_conf_t
*** 3265,3270 ****
--- 3288,3296 ----
      ngx_conf_merge_msec_value(conf->client_body_timeout,
                                prev->client_body_timeout, 60000);
  
+     ngx_conf_merge_uint_value(conf->keepalive_disable, prev->keepalive_disable,
+                               NGX_HTTP_KEEPALIVE_DISABLE_MSIE6
+                               |NGX_HTTP_KEEPALIVE_DISABLE_SAFARI);
      ngx_conf_merge_uint_value(conf->satisfy, prev->satisfy,
                                NGX_HTTP_SATISFY_ALL);
      ngx_conf_merge_uint_value(conf->if_modified_since, prev->if_modified_since,
diff -p -N --text -r /tmp/patch.inc.get1.rVbhOp/src/http/ngx_http_core_module.h /tmp/patch.inc.get2.mWA3bo/src/http/ngx_http_core_module.h
*** /tmp/patch.inc.get1.rVbhOp/src/http/ngx_http_core_module.h	2013-04-29 23:58:09.645843739 +0200
--- /tmp/patch.inc.get2.mWA3bo/src/http/ngx_http_core_module.h	2013-04-29 23:58:12.857859665 +0200
***************
*** 38,43 ****
--- 38,48 ----
  #define NGX_HTTP_IMS_BEFORE             2
  
  
+ #define NGX_HTTP_KEEPALIVE_DISABLE_NONE    0x0002
+ #define NGX_HTTP_KEEPALIVE_DISABLE_MSIE6   0x0004
+ #define NGX_HTTP_KEEPALIVE_DISABLE_SAFARI  0x0008
+ 
+ 
  typedef struct ngx_http_location_tree_node_s  ngx_http_location_tree_node_t;
  typedef struct ngx_http_core_loc_conf_s  ngx_http_core_loc_conf_t;
  
*************** struct ngx_http_core_loc_conf_s {
*** 349,354 ****
--- 354,360 ----
      time_t        keepalive_header;        /* keepalive_timeout */
  
      ngx_uint_t    keepalive_requests;      /* keepalive_requests */
+     ngx_uint_t    keepalive_disable;       /* keepalive_disable */
      ngx_uint_t    satisfy;                 /* satisfy */
      ngx_uint_t    if_modified_since;       /* if_modified_since */
      ngx_uint_t    client_body_in_file_only; /* client_body_in_file_only */
diff -p -N --text -r /tmp/patch.inc.get1.rVbhOp/src/http/ngx_http_upstream.c /tmp/patch.inc.get2.mWA3bo/src/http/ngx_http_upstream.c
*** /tmp/patch.inc.get1.rVbhOp/src/http/ngx_http_upstream.c	2013-04-29 23:58:09.645843739 +0200
--- /tmp/patch.inc.get2.mWA3bo/src/http/ngx_http_upstream.c	2013-04-29 23:58:12.861859688 +0200
*************** ngx_http_upstream_cache(ngx_http_request
*** 666,680 ****
  
          ngx_http_file_cache_create_key(r);
  
-         if (r->cache->header_start >= u->conf->buffer_size) {
-             ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
-                 "cache key too large, increase upstream buffer size %uz",
-                 u->conf->buffer_size);
- 
-             r->cache = NULL;
-             return NGX_DECLINED;
-         }
- 
          u->cacheable = 1;
  
          c = r->cache;
--- 666,671 ----
diff -p -N --text -r /tmp/patch.inc.get1.rVbhOp/src/http/ngx_http_upstream.h /tmp/patch.inc.get2.mWA3bo/src/http/ngx_http_upstream.h
*** /tmp/patch.inc.get1.rVbhOp/src/http/ngx_http_upstream.h	2013-04-29 23:58:09.645843739 +0200
--- /tmp/patch.inc.get2.mWA3bo/src/http/ngx_http_upstream.h	2013-04-29 23:58:12.861859688 +0200
*************** typedef struct {
*** 53,59 ****
      ngx_uint_t                       status;
      time_t                           response_sec;
      ngx_uint_t                       response_msec;
!     off_t                           response_length;
  
      ngx_str_t                       *peer;
  } ngx_http_upstream_state_t;
--- 53,59 ----
      ngx_uint_t                       status;
      time_t                           response_sec;
      ngx_uint_t                       response_msec;
!     off_t                            response_length;
  
      ngx_str_t                       *peer;
  } ngx_http_upstream_state_t;
diff -p -N --text -r /tmp/patch.inc.get1.rVbhOp/src/os/unix/ngx_errno.c /tmp/patch.inc.get2.mWA3bo/src/os/unix/ngx_errno.c
*** /tmp/patch.inc.get1.rVbhOp/src/os/unix/ngx_errno.c	2013-04-29 23:58:09.653843780 +0200
--- /tmp/patch.inc.get2.mWA3bo/src/os/unix/ngx_errno.c	2013-04-29 23:58:12.865859704 +0200
***************
*** 8,61 ****
  #include <ngx_core.h>
  
  
! #if (NGX_HAVE_STRERROR_R)
  
- u_char *
- ngx_strerror_r(int err, u_char *errstr, size_t size)
- {
-     if (size == 0) {
-         return errstr;
-     }
  
!     errstr[0] = '\0';
  
-     strerror_r(err, (char *) errstr, size);
  
!     while (*errstr && size) {
!         errstr++;
!         size--;
!     }
  
!     return errstr;
! }
  
! #elif (NGX_HAVE_GNU_STRERROR_R)
  
- /* Linux strerror_r() */
  
! u_char *
! ngx_strerror_r(int err, u_char *errstr, size_t size)
  {
!     char  *str;
  
!     if (size == 0) {
!         return errstr;
      }
  
!     errstr[0] = '\0';
  
!     str = strerror_r(err, (char *) errstr, size);
  
!     if (str != (char *) errstr) {
!         return ngx_cpystrn(errstr, (u_char *) str, size);
!     }
  
!     while (*errstr && size) {
!         errstr++;
!         size--;
!     }
! 
!     return errstr;
  }
- 
- #endif
--- 8,86 ----
  #include <ngx_core.h>
  
  
! /*
!  * The strerror() messages are copied because:
!  *
!  * 1) strerror() and strerror_r() functions are not Async-Signal-Safe,
!  *    therefore, they can not be used in signal handlers;
!  *
!  * 2) a direct sys_errlist[] array may be used instead of these functions,
!  *    but Linux linker warns about its usage:
!  *
!  * warning: `sys_errlist' is deprecated; use `strerror' or `strerror_r' instead
!  * warning: `sys_nerr' is deprecated; use `strerror' or `strerror_r' instead
!  *
!  *    causing false bug reports.
!  */
  
  
! static ngx_str_t  *ngx_sys_errlist;
! static ngx_str_t   ngx_unknown_error = ngx_string("Unknown error");
  
  
! u_char *
! ngx_strerror(ngx_err_t err, u_char *errstr, size_t size)
! {
!     ngx_str_t  *msg;
  
!     msg = ((ngx_uint_t) err < NGX_SYS_NERR) ? &ngx_sys_errlist[err]:
!                                               &ngx_unknown_error;
!     size = ngx_min(size, msg->len);
  
!     return ngx_cpymem(errstr, msg->data, size);
! }
  
  
! ngx_uint_t
! ngx_strerror_init(void)
  {
!     char       *msg;
!     u_char     *p;
!     size_t      len;
!     ngx_err_t   err;
! 
!     /*
!      * ngx_strerror() is not ready to work at this stage, therefore,
!      * malloc() is used and possible errors are logged using strerror().
!      */
! 
!     len = NGX_SYS_NERR * sizeof(ngx_str_t);
! 
!     ngx_sys_errlist = malloc(len);
!     if (ngx_sys_errlist == NULL) {
!         goto failed;
!     }
  
!     for (err = 0; err < NGX_SYS_NERR; err++) {
!         msg = strerror(err);
!         len = ngx_strlen(msg);
! 
!         p = malloc(len);
!         if (p == NULL) {
!             goto failed;
!         }
! 
!         ngx_memcpy(p, msg, len);
!         ngx_sys_errlist[err].len = len;
!         ngx_sys_errlist[err].data = p;
      }
  
!     return NGX_OK;
  
! failed:
  
!     err = errno;
!     ngx_log_stderr(0, "malloc(%uz) failed (%d: %s)", len, err, strerror(err));
  
!     return NGX_ERROR;
  }
diff -p -N --text -r /tmp/patch.inc.get1.rVbhOp/src/os/unix/ngx_errno.h /tmp/patch.inc.get2.mWA3bo/src/os/unix/ngx_errno.h
*** /tmp/patch.inc.get1.rVbhOp/src/os/unix/ngx_errno.h	2013-04-29 23:58:09.653843780 +0200
--- /tmp/patch.inc.get2.mWA3bo/src/os/unix/ngx_errno.h	2013-04-29 23:58:12.865859704 +0200
*************** typedef int               ngx_err_t;
*** 60,89 ****
  #define ngx_set_socket_errno(err)  errno = err
  
  
! #if (NGX_HAVE_STRERROR_R || NGX_HAVE_GNU_STRERROR_R)
! 
! u_char *ngx_strerror_r(int err, u_char *errstr, size_t size);
! 
! #else
! 
! /* Solaris and Tru64 UNIX have thread-safe strerror() */
! 
! #define ngx_strerror_r(err, errstr, size)                                    \
!     ngx_cpystrn(errstr, (u_char *) strerror(err), size)
! 
! #endif
! 
! 
! #if (NGX_HAVE_SYS_ERRLIST)
! 
! #define ngx_sigsafe_strerror(err)                                            \
!     (err > 0 && err < sys_nerr) ? sys_errlist[err] : "Unknown error"
! 
! #else
! 
! #define ngx_sigsafe_strerror(err)  ""
! 
! #endif
  
  
  #endif /* _NGX_ERRNO_H_INCLUDED_ */
--- 60,67 ----
  #define ngx_set_socket_errno(err)  errno = err
  
  
! u_char *ngx_strerror(ngx_err_t err, u_char *errstr, size_t size);
! ngx_uint_t ngx_strerror_init(void);
  
  
  #endif /* _NGX_ERRNO_H_INCLUDED_ */
diff -p -N --text -r /tmp/patch.inc.get1.rVbhOp/src/os/unix/ngx_posix_init.c /tmp/patch.inc.get2.mWA3bo/src/os/unix/ngx_posix_init.c
*** /tmp/patch.inc.get1.rVbhOp/src/os/unix/ngx_posix_init.c	2013-04-29 23:58:09.653843780 +0200
--- /tmp/patch.inc.get2.mWA3bo/src/os/unix/ngx_posix_init.c	2013-04-29 23:58:12.865859704 +0200
*************** ngx_os_init(ngx_log_t *log)
*** 60,66 ****
  
      ngx_max_sockets = (ngx_int_t) rlmt.rlim_cur;
  
! #if (NGX_HAVE_INHERITED_NONBLOCK)
      ngx_inherited_nonblocking = 1;
  #else
      ngx_inherited_nonblocking = 0;
--- 60,66 ----
  
      ngx_max_sockets = (ngx_int_t) rlmt.rlim_cur;
  
! #if (NGX_HAVE_INHERITED_NONBLOCK || NGX_HAVE_ACCEPT4)
      ngx_inherited_nonblocking = 1;
  #else
      ngx_inherited_nonblocking = 0;
diff -p -N --text -r /tmp/patch.inc.get1.rVbhOp/src/os/unix/ngx_process.c /tmp/patch.inc.get2.mWA3bo/src/os/unix/ngx_process.c
*** /tmp/patch.inc.get1.rVbhOp/src/os/unix/ngx_process.c	2013-04-29 23:58:09.653843780 +0200
--- /tmp/patch.inc.get2.mWA3bo/src/os/unix/ngx_process.c	2013-04-29 23:58:12.865859704 +0200
*************** ngx_process_get_status(void)
*** 479,495 ****
               */
  
              if (err == NGX_ECHILD) {
!                 ngx_log_error(NGX_LOG_INFO, ngx_cycle->log, 0,
!                               "waitpid() failed (%d: %s)",
!                               err, ngx_sigsafe_strerror(err));
                  return;
              }
  
  #endif
  
!             ngx_log_error(NGX_LOG_ALERT, ngx_cycle->log, 0,
!                           "waitpid() failed (%d: %s)",
!                           err, ngx_sigsafe_strerror(err));
              return;
          }
  
--- 479,493 ----
               */
  
              if (err == NGX_ECHILD) {
!                 ngx_log_error(NGX_LOG_INFO, ngx_cycle->log, err,
!                               "waitpid() failed");
                  return;
              }
  
  #endif
  
!             ngx_log_error(NGX_LOG_ALERT, ngx_cycle->log, err,
!                           "waitpid() failed");
              return;
          }
  

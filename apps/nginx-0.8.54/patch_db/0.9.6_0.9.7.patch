diff -p -N --text -r /tmp/patch.inc.get1.8HKtbu/src/core/nginx.h /tmp/patch.inc.get2.FVaHob/src/core/nginx.h
*** /tmp/patch.inc.get1.8HKtbu/src/core/nginx.h	2013-04-30 00:52:52.066120386 +0200
--- /tmp/patch.inc.get2.FVaHob/src/core/nginx.h	2013-04-30 00:52:55.294136415 +0200
***************
*** 8,15 ****
  #define _NGINX_H_INCLUDED_
  
  
! #define nginx_version         9006
! #define NGINX_VERSION      "0.9.6"
  #define NGINX_VER          "nginx/" NGINX_VERSION
  
  #define NGINX_VAR          "NGINX"
--- 8,15 ----
  #define _NGINX_H_INCLUDED_
  
  
! #define nginx_version         9007
! #define NGINX_VERSION      "0.9.7"
  #define NGINX_VER          "nginx/" NGINX_VERSION
  
  #define NGINX_VAR          "NGINX"
diff -p -N --text -r /tmp/patch.inc.get1.8HKtbu/src/core/ngx_connection.c /tmp/patch.inc.get2.FVaHob/src/core/ngx_connection.c
*** /tmp/patch.inc.get1.8HKtbu/src/core/ngx_connection.c	2013-04-30 00:52:52.066120386 +0200
--- /tmp/patch.inc.get2.FVaHob/src/core/ngx_connection.c	2013-04-30 00:52:55.294136415 +0200
***************
*** 12,17 ****
--- 12,20 ----
  ngx_os_io_t  ngx_io;
  
  
+ static void ngx_drain_connections(void);
+ 
+ 
  ngx_listening_t *
  ngx_create_listening(ngx_conf_t *cf, void *sockaddr, socklen_t socklen)
  {
*************** ngx_get_connection(ngx_socket_t s, ngx_l
*** 719,724 ****
--- 722,732 ----
      c = ngx_cycle->free_connections;
  
      if (c == NULL) {
+         ngx_drain_connections();
+         c = ngx_cycle->free_connections;
+     }
+ 
+     if (c == NULL) {
          ngx_log_error(NGX_LOG_ALERT, log, 0,
                        "%ui worker_connections are not enough",
                        ngx_cycle->connection_n);
*************** ngx_close_connection(ngx_connection_t *c
*** 861,866 ****
--- 869,876 ----
  
  #endif
  
+     ngx_reusable_connection(c, 0);
+ 
      log_error = c->log_error;
  
      ngx_free_connection(c);
*************** ngx_close_connection(ngx_connection_t *c
*** 899,904 ****
--- 909,959 ----
      }
  }
  
+ 
+ void
+ ngx_reusable_connection(ngx_connection_t *c, ngx_uint_t reusable)
+ {
+     ngx_log_debug1(NGX_LOG_DEBUG_CORE, c->log, 0,
+                    "reusable connection: %ui", reusable);
+ 
+     if (c->reusable) {
+         ngx_queue_remove(&c->queue);
+     }
+ 
+     c->reusable = reusable;
+ 
+     if (reusable) {
+         /* need cast as ngx_cycle is volatile */
+ 
+         ngx_queue_insert_head(
+             (ngx_queue_t *) &ngx_cycle->reusable_connections_queue, &c->queue);
+     }
+ }
+ 
+ 
+ static void
+ ngx_drain_connections(void)
+ {
+     ngx_int_t          i;
+     ngx_queue_t       *q;
+     ngx_connection_t  *c;
+ 
+     for (i = 0; i < 32; i++) {
+         if (ngx_queue_empty(&ngx_cycle->reusable_connections_queue)) {
+             break;
+         }
+ 
+         q = ngx_queue_last(&ngx_cycle->reusable_connections_queue);
+         c = ngx_queue_data(q, ngx_connection_t, queue);
+ 
+         ngx_log_debug0(NGX_LOG_DEBUG_CORE, c->log, 0,
+                        "reusing connection");
+ 
+         c->close = 1;
+         c->read->handler(c->read);
+     }
+ }
+ 
  
  ngx_int_t
  ngx_connection_local_sockaddr(ngx_connection_t *c, ngx_str_t *s,
diff -p -N --text -r /tmp/patch.inc.get1.8HKtbu/src/core/ngx_connection.h /tmp/patch.inc.get2.FVaHob/src/core/ngx_connection.h
*** /tmp/patch.inc.get1.8HKtbu/src/core/ngx_connection.h	2013-04-30 00:52:52.066120386 +0200
--- /tmp/patch.inc.get2.FVaHob/src/core/ngx_connection.h	2013-04-30 00:52:55.294136415 +0200
*************** struct ngx_connection_s {
*** 135,140 ****
--- 135,142 ----
  
      ngx_buf_t          *buffer;
  
+     ngx_queue_t         queue;
+ 
      ngx_atomic_uint_t   number;
  
      ngx_uint_t          requests;
*************** struct ngx_connection_s {
*** 150,155 ****
--- 152,158 ----
      unsigned            destroyed:1;
  
      unsigned            idle:1;
+     unsigned            reusable:1;
      unsigned            close:1;
  
      unsigned            sendfile:1;
*************** ngx_int_t ngx_connection_error(ngx_conne
*** 186,190 ****
--- 189,194 ----
  ngx_connection_t *ngx_get_connection(ngx_socket_t s, ngx_log_t *log);
  void ngx_free_connection(ngx_connection_t *c);
  
+ void ngx_reusable_connection(ngx_connection_t *c, ngx_uint_t reusable);
  
  #endif /* _NGX_CONNECTION_H_INCLUDED_ */
diff -p -N --text -r /tmp/patch.inc.get1.8HKtbu/src/core/ngx_cycle.c /tmp/patch.inc.get2.FVaHob/src/core/ngx_cycle.c
*** /tmp/patch.inc.get1.8HKtbu/src/core/ngx_cycle.c	2013-04-30 00:52:52.066120386 +0200
--- /tmp/patch.inc.get2.FVaHob/src/core/ngx_cycle.c	2013-04-30 00:52:55.294136415 +0200
*************** ngx_init_cycle(ngx_cycle_t *old_cycle)
*** 181,186 ****
--- 181,189 ----
      cycle->listening.pool = pool;
  
  
+     ngx_queue_init(&cycle->reusable_connections_queue);
+ 
+ 
      cycle->conf_ctx = ngx_pcalloc(pool, ngx_max_module * sizeof(void *));
      if (cycle->conf_ctx == NULL) {
          ngx_destroy_pool(pool);
diff -p -N --text -r /tmp/patch.inc.get1.8HKtbu/src/core/ngx_cycle.h /tmp/patch.inc.get2.FVaHob/src/core/ngx_cycle.h
*** /tmp/patch.inc.get1.8HKtbu/src/core/ngx_cycle.h	2013-04-30 00:52:52.066120386 +0200
--- /tmp/patch.inc.get2.FVaHob/src/core/ngx_cycle.h	2013-04-30 00:52:55.294136415 +0200
*************** struct ngx_cycle_s {
*** 44,49 ****
--- 44,51 ----
      ngx_connection_t         *free_connections;
      ngx_uint_t                free_connection_n;
  
+     ngx_queue_t               reusable_connections_queue;
+ 
      ngx_array_t               listening;
      ngx_array_t               pathes;
      ngx_list_t                open_files;
diff -p -N --text -r /tmp/patch.inc.get1.8HKtbu/src/http/modules/ngx_http_fastcgi_module.c /tmp/patch.inc.get2.FVaHob/src/http/modules/ngx_http_fastcgi_module.c
*** /tmp/patch.inc.get1.8HKtbu/src/http/modules/ngx_http_fastcgi_module.c	2013-04-30 00:52:52.062120337 +0200
--- /tmp/patch.inc.get2.FVaHob/src/http/modules/ngx_http_fastcgi_module.c	2013-04-30 00:52:55.290136370 +0200
*************** ngx_http_fastcgi_eval(ngx_http_request_t
*** 636,647 ****
          return NGX_ERROR;
      }
  
-     if (url.no_port) {
-         ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
-                       "no port in upstream \"%V\"", &url.url);
-         return NGX_ERROR;
-     }
- 
      u = r->upstream;
  
      u->resolved = ngx_pcalloc(r->pool, sizeof(ngx_http_upstream_resolved_t));
--- 636,641 ----
*************** ngx_http_fastcgi_eval(ngx_http_request_t
*** 658,663 ****
--- 652,658 ----
      } else {
          u->resolved->host = url.host;
          u->resolved->port = url.port;
+         u->resolved->no_port = url.no_port;
      }
  
      return NGX_OK;
diff -p -N --text -r /tmp/patch.inc.get1.8HKtbu/src/http/modules/ngx_http_image_filter_module.c /tmp/patch.inc.get2.FVaHob/src/http/modules/ngx_http_image_filter_module.c
*** /tmp/patch.inc.get1.8HKtbu/src/http/modules/ngx_http_image_filter_module.c	2013-04-30 00:52:52.062120337 +0200
--- /tmp/patch.inc.get2.FVaHob/src/http/modules/ngx_http_image_filter_module.c	2013-04-30 00:52:55.290136370 +0200
***************
*** 16,21 ****
--- 16,22 ----
  #define NGX_HTTP_IMAGE_SIZE      2
  #define NGX_HTTP_IMAGE_RESIZE    3
  #define NGX_HTTP_IMAGE_CROP      4
+ #define NGX_HTTP_IMAGE_ROTATE    5
  
  
  #define NGX_HTTP_IMAGE_START     0
*************** typedef struct {
*** 38,49 ****
--- 39,52 ----
      ngx_uint_t                   filter;
      ngx_uint_t                   width;
      ngx_uint_t                   height;
+     ngx_uint_t                   angle;
      ngx_uint_t                   jpeg_quality;
  
      ngx_flag_t                   transparency;
  
      ngx_http_complex_value_t    *wcv;
      ngx_http_complex_value_t    *hcv;
+     ngx_http_complex_value_t    *acv;
      ngx_http_complex_value_t    *jqcv;
  
      size_t                       buffer_size;
*************** typedef struct {
*** 58,66 ****
  
      ngx_uint_t                   width;
      ngx_uint_t                   height;
- 
      ngx_uint_t                   max_width;
      ngx_uint_t                   max_height;
  
      ngx_uint_t                   phase;
      ngx_uint_t                   type;
--- 61,69 ----
  
      ngx_uint_t                   width;
      ngx_uint_t                   height;
      ngx_uint_t                   max_width;
      ngx_uint_t                   max_height;
+     ngx_uint_t                   angle;
  
      ngx_uint_t                   phase;
      ngx_uint_t                   type;
*************** static ngx_int_t ngx_http_image_filter_i
*** 108,114 ****
  static ngx_command_t  ngx_http_image_filter_commands[] = {
  
      { ngx_string("image_filter"),
!       NGX_HTTP_LOC_CONF|NGX_CONF_TAKE13,
        ngx_http_image_filter,
        NGX_HTTP_LOC_CONF_OFFSET,
        0,
--- 111,117 ----
  static ngx_command_t  ngx_http_image_filter_commands[] = {
  
      { ngx_string("image_filter"),
!       NGX_HTTP_LOC_CONF|NGX_CONF_TAKE13|NGX_CONF_TAKE2,
        ngx_http_image_filter,
        NGX_HTTP_LOC_CONF_OFFSET,
        0,
*************** ngx_http_image_process(ngx_http_request_
*** 492,497 ****
--- 495,511 ----
          return ngx_http_image_json(r, rc == NGX_OK ? ctx : NULL);
      }
  
+     ctx->angle = ngx_http_image_filter_get_value(r, conf->acv, conf->angle);
+ 
+     if (conf->filter == NGX_HTTP_IMAGE_ROTATE) {
+ 
+         if (ctx->angle != 90 && ctx->angle != 180 && ctx->angle != 270) {
+             return NULL;
+         }
+ 
+         return ngx_http_image_resize(r, ctx);
+     }
+ 
      ctx->max_width = ngx_http_image_filter_get_value(r, conf->wcv, conf->width);
      if (ctx->max_width == 0) {
          return NULL;
*************** ngx_http_image_process(ngx_http_request_
*** 506,511 ****
--- 520,526 ----
      if (rc == NGX_OK
          && ctx->width <= ctx->max_width
          && ctx->height <= ctx->max_height
+         && ctx->angle == 0
          && !ctx->force)
      {
          return ngx_http_image_asis(r, ctx);
*************** ngx_http_image_resize(ngx_http_request_t
*** 710,716 ****
  {
      int                            sx, sy, dx, dy, ox, oy, size,
                                     colors, palette, transparent,
!                                    red, green, blue;
      u_char                        *out;
      ngx_buf_t                     *b;
      ngx_uint_t                     resize;
--- 725,731 ----
  {
      int                            sx, sy, dx, dy, ox, oy, size,
                                     colors, palette, transparent,
!                                    red, green, blue, t;
      u_char                        *out;
      ngx_buf_t                     *b;
      ngx_uint_t                     resize;
*************** ngx_http_image_resize(ngx_http_request_t
*** 730,735 ****
--- 745,751 ----
      conf = ngx_http_get_module_loc_conf(r, ngx_http_image_filter_module);
  
      if (!ctx->force
+         && ctx->angle == 0
          && (ngx_uint_t) sx <= ctx->max_width
          && (ngx_uint_t) sy <= ctx->max_height)
      {
*************** transparent:
*** 781,786 ****
--- 797,806 ----
  
          resize = 1;
  
+     } else if (conf->filter == NGX_HTTP_IMAGE_ROTATE) {
+ 
+         resize = 0;
+ 
      } else { /* NGX_HTTP_IMAGE_CROP */
  
          resize = 0;
*************** transparent:
*** 829,834 ****
--- 849,886 ----
          dst = src;
      }
  
+     if (ctx->angle) {
+         src = dst;
+ 
+         switch (ctx->angle) {
+ 
+         case 90:
+         case 270:
+             dst = ngx_http_image_new(r, dy, dx, palette);
+             if (dst == NULL) {
+                 gdImageDestroy(src);
+                 return NULL;
+             }
+             gdImageCopyRotated(dst, src, dy/2, dx/2, 0, 0, dx, dy, ctx->angle);
+             gdImageDestroy(src);
+             break;
+ 
+         case 180:
+             dst = ngx_http_image_new(r, dx, dy, palette);
+             if (dst == NULL) {
+                 gdImageDestroy(src);
+                 return NULL;
+             }
+             gdImageCopyRotated(dst, src, dx/2, dy/2, 0, 0, dx, dy, ctx->angle);
+             gdImageDestroy(src);
+             break;
+         }
+ 
+         t = dx;
+         dx = dy;
+         dy = t;
+     }
+ 
      if (conf->filter == NGX_HTTP_IMAGE_CROP) {
  
          src = dst;
*************** ngx_http_image_filter_create_conf(ngx_co
*** 1090,1095 ****
--- 1142,1148 ----
  
      conf->filter = NGX_CONF_UNSET_UINT;
      conf->jpeg_quality = NGX_CONF_UNSET_UINT;
+     conf->angle = NGX_CONF_UNSET_UINT;
      conf->transparency = NGX_CONF_UNSET;
      conf->buffer_size = NGX_CONF_UNSET_SIZE;
  
*************** ngx_http_image_filter_merge_conf(ngx_con
*** 1124,1129 ****
--- 1177,1187 ----
          conf->jqcv = prev->jqcv;
      }
  
+     ngx_conf_merge_uint_value(conf->angle, prev->angle, 0);
+     if (conf->acv == NULL) {
+         conf->acv = prev->acv;
+     }
+ 
      ngx_conf_merge_value(conf->transparency, prev->transparency, 1);
  
      ngx_conf_merge_size_value(conf->buffer_size, prev->buffer_size,
*************** ngx_http_image_filter(ngx_conf_t *cf, ng
*** 1163,1168 ****
--- 1221,1266 ----
          }
  
          return NGX_CONF_OK;
+ 
+     } else if (cf->args->nelts == 3) {
+ 
+         if (ngx_strcmp(value[i].data, "rotate") == 0) {
+             imcf->filter = NGX_HTTP_IMAGE_ROTATE;
+ 
+             ngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));
+ 
+             ccv.cf = cf;
+             ccv.value = &value[++i];
+             ccv.complex_value = &cv;
+ 
+             if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
+                 return NGX_CONF_ERROR;
+             }
+ 
+             if (cv.lengths == NULL) {
+                 n = ngx_http_image_filter_value(&value[i]);
+ 
+                 if (n != 90 && n != 180 && n != 270) {
+                     goto failed;
+                 }
+ 
+                 imcf->angle = (ngx_uint_t) n;
+ 
+             } else {
+                 imcf->acv = ngx_palloc(cf->pool,
+                                        sizeof(ngx_http_complex_value_t));
+                 if (imcf->acv == NULL) {
+                     return NGX_CONF_ERROR;
+                 }
+ 
+                 *imcf->acv = cv;
+             }
+ 
+             return NGX_CONF_OK;
+ 
+         } else {
+             goto failed;
+         }
      }
  
      if (ngx_strcmp(value[i].data, "resize") == 0) {
diff -p -N --text -r /tmp/patch.inc.get1.8HKtbu/src/http/modules/ngx_http_scgi_module.c /tmp/patch.inc.get2.FVaHob/src/http/modules/ngx_http_scgi_module.c
*** /tmp/patch.inc.get1.8HKtbu/src/http/modules/ngx_http_scgi_module.c	2013-04-30 00:52:52.062120337 +0200
--- /tmp/patch.inc.get2.FVaHob/src/http/modules/ngx_http_scgi_module.c	2013-04-30 00:52:55.290136370 +0200
*************** ngx_http_scgi_eval(ngx_http_request_t *r
*** 458,469 ****
          return NGX_ERROR;
      }
  
-     if (url.no_port) {
-         ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
-                       "no port in upstream \"%V\"", &url.url);
-         return NGX_ERROR;
-     }
- 
      u = r->upstream;
  
      u->resolved = ngx_pcalloc(r->pool, sizeof(ngx_http_upstream_resolved_t));
--- 458,463 ----
*************** ngx_http_scgi_eval(ngx_http_request_t *r
*** 480,485 ****
--- 474,480 ----
      } else {
          u->resolved->host = url.host;
          u->resolved->port = url.port;
+         u->resolved->no_port = url.no_port;
      }
  
      return NGX_OK;
diff -p -N --text -r /tmp/patch.inc.get1.8HKtbu/src/http/modules/ngx_http_uwsgi_module.c /tmp/patch.inc.get2.FVaHob/src/http/modules/ngx_http_uwsgi_module.c
*** /tmp/patch.inc.get1.8HKtbu/src/http/modules/ngx_http_uwsgi_module.c	2013-04-30 00:52:52.062120337 +0200
--- /tmp/patch.inc.get2.FVaHob/src/http/modules/ngx_http_uwsgi_module.c	2013-04-30 00:52:55.290136370 +0200
*************** ngx_http_uwsgi_eval(ngx_http_request_t *
*** 491,502 ****
          return NGX_ERROR;
      }
  
-     if (url.no_port) {
-         ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
-                       "no port in upstream \"%V\"", &url.url);
-         return NGX_ERROR;
-     }
- 
      u = r->upstream;
  
      u->resolved = ngx_pcalloc(r->pool, sizeof(ngx_http_upstream_resolved_t));
--- 491,496 ----
*************** ngx_http_uwsgi_eval(ngx_http_request_t *
*** 513,518 ****
--- 507,513 ----
      } else {
          u->resolved->host = url.host;
          u->resolved->port = url.port;
+         u->resolved->no_port = url.no_port;
      }
  
      return NGX_OK;
diff -p -N --text -r /tmp/patch.inc.get1.8HKtbu/src/http/ngx_http_request.c /tmp/patch.inc.get2.FVaHob/src/http/ngx_http_request.c
*** /tmp/patch.inc.get1.8HKtbu/src/http/ngx_http_request.c	2013-04-30 00:52:52.062120337 +0200
--- /tmp/patch.inc.get2.FVaHob/src/http/ngx_http_request.c	2013-04-30 00:52:55.294136415 +0200
*************** ngx_http_set_keepalive(ngx_http_request_
*** 2594,2599 ****
--- 2594,2600 ----
  #endif
  
      c->idle = 1;
+     ngx_reusable_connection(c, 1);
  
      if (rev->ready) {
          ngx_post_event(rev, &ngx_posted_events);
*************** ngx_http_keepalive_handler(ngx_event_t *
*** 2703,2708 ****
--- 2704,2710 ----
      c->log->action = "reading client request line";
  
      c->idle = 0;
+     ngx_reusable_connection(c, 0);
  
      ngx_http_init_request(rev);
  }
diff -p -N --text -r /tmp/patch.inc.get1.8HKtbu/src/http/ngx_http_upstream.c /tmp/patch.inc.get2.FVaHob/src/http/ngx_http_upstream.c
*** /tmp/patch.inc.get1.8HKtbu/src/http/ngx_http_upstream.c	2013-04-30 00:52:52.062120337 +0200
--- /tmp/patch.inc.get2.FVaHob/src/http/ngx_http_upstream.c	2013-04-30 00:52:55.290136370 +0200
*************** ngx_http_upstream_init_request(ngx_http_
*** 574,579 ****
--- 574,587 ----
              }
          }
  
+         if (u->resolved->port == 0) {
+             ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
+                           "no port in upstream \"%V\"", host);
+             ngx_http_upstream_finalize_request(r, u,
+                                                NGX_HTTP_INTERNAL_SERVER_ERROR);
+             return;
+         }
+ 
          temp.name = *host;
  
          ctx = ngx_resolve_start(clcf->resolver, &temp);

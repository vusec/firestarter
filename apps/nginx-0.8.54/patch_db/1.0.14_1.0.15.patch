diff -p -N --text -r /tmp/patch.inc.get1.1K6f8u/src/core/nginx.h /tmp/patch.inc.get2.EFEFnS/src/core/nginx.h
*** /tmp/patch.inc.get1.1K6f8u/src/core/nginx.h	2013-04-30 11:28:43.719304228 +0200
--- /tmp/patch.inc.get2.EFEFnS/src/core/nginx.h	2013-04-30 11:28:46.851319751 +0200
***************
*** 9,16 ****
  #define _NGINX_H_INCLUDED_
  
  
! #define nginx_version      1000014
! #define NGINX_VERSION      "1.0.14"
  #define NGINX_VER          "nginx/" NGINX_VERSION
  
  #define NGINX_VAR          "NGINX"
--- 9,16 ----
  #define _NGINX_H_INCLUDED_
  
  
! #define nginx_version      1000015
! #define NGINX_VERSION      "1.0.15"
  #define NGINX_VER          "nginx/" NGINX_VERSION
  
  #define NGINX_VAR          "NGINX"
diff -p -N --text -r /tmp/patch.inc.get1.1K6f8u/src/http/modules/ngx_http_mp4_module.c /tmp/patch.inc.get2.EFEFnS/src/http/modules/ngx_http_mp4_module.c
*** /tmp/patch.inc.get1.1K6f8u/src/http/modules/ngx_http_mp4_module.c	2013-04-30 11:28:43.687304064 +0200
--- /tmp/patch.inc.get2.EFEFnS/src/http/modules/ngx_http_mp4_module.c	2013-04-30 11:28:46.847319723 +0200
*************** typedef struct {
*** 156,161 ****
--- 156,162 ----
  
  #define ngx_mp4_atom_header(mp4)   (mp4->buffer_pos - 8)
  #define ngx_mp4_atom_data(mp4)     mp4->buffer_pos
+ #define ngx_mp4_atom_data_size(t)  (uint64_t) (sizeof(t) - 8)
  #define ngx_mp4_atom_next(mp4, n)  mp4->buffer_pos += n; mp4->offset += n
  
  
*************** typedef struct {
*** 204,210 ****
  static ngx_int_t ngx_http_mp4_process(ngx_http_mp4_file_t *mp4);
  static ngx_int_t ngx_http_mp4_read_atom(ngx_http_mp4_file_t *mp4,
      ngx_http_mp4_atom_handler_t *atom, uint64_t atom_data_size);
! static ngx_int_t ngx_http_mp4_read(ngx_http_mp4_file_t *mp4);
  static ngx_int_t ngx_http_mp4_read_ftyp_atom(ngx_http_mp4_file_t *mp4,
      uint64_t atom_data_size);
  static ngx_int_t ngx_http_mp4_read_moov_atom(ngx_http_mp4_file_t *mp4,
--- 205,211 ----
  static ngx_int_t ngx_http_mp4_process(ngx_http_mp4_file_t *mp4);
  static ngx_int_t ngx_http_mp4_read_atom(ngx_http_mp4_file_t *mp4,
      ngx_http_mp4_atom_handler_t *atom, uint64_t atom_data_size);
! static ngx_int_t ngx_http_mp4_read(ngx_http_mp4_file_t *mp4, size_t size);
  static ngx_int_t ngx_http_mp4_read_ftyp_atom(ngx_http_mp4_file_t *mp4,
      uint64_t atom_data_size);
  static ngx_int_t ngx_http_mp4_read_moov_atom(ngx_http_mp4_file_t *mp4,
*************** static ngx_int_t ngx_http_mp4_update_sts
*** 265,271 ****
      ngx_http_mp4_trak_t *trak);
  static ngx_int_t ngx_http_mp4_read_stsz_atom(ngx_http_mp4_file_t *mp4,
      uint64_t atom_data_size);
! static void ngx_http_mp4_update_stsz_atom(ngx_http_mp4_file_t *mp4,
      ngx_http_mp4_trak_t *trak);
  static ngx_int_t ngx_http_mp4_read_stco_atom(ngx_http_mp4_file_t *mp4,
      uint64_t atom_data_size);
--- 266,272 ----
      ngx_http_mp4_trak_t *trak);
  static ngx_int_t ngx_http_mp4_read_stsz_atom(ngx_http_mp4_file_t *mp4,
      uint64_t atom_data_size);
! static ngx_int_t ngx_http_mp4_update_stsz_atom(ngx_http_mp4_file_t *mp4,
      ngx_http_mp4_trak_t *trak);
  static ngx_int_t ngx_http_mp4_read_stco_atom(ngx_http_mp4_file_t *mp4,
      uint64_t atom_data_size);
*************** ngx_http_mp4_process(ngx_http_mp4_file_t
*** 693,699 ****
              return NGX_ERROR;
          }
  
!         ngx_http_mp4_update_stsz_atom(mp4, &trak[i]);
  
          if (trak[i].out[NGX_HTTP_MP4_CO64_DATA].buf) {
              if (ngx_http_mp4_update_co64_atom(mp4, &trak[i]) != NGX_OK) {
--- 694,702 ----
              return NGX_ERROR;
          }
  
!         if (ngx_http_mp4_update_stsz_atom(mp4, &trak[i]) != NGX_OK) {
!             return NGX_ERROR;
!         }
  
          if (trak[i].out[NGX_HTTP_MP4_CO64_DATA].buf) {
              if (ngx_http_mp4_update_co64_atom(mp4, &trak[i]) != NGX_OK) {
*************** ngx_http_mp4_process(ngx_http_mp4_file_t
*** 744,750 ****
                   - start_offset;
  
      ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
!                    "mp4 adjustment:%D", adjustment);
  
      for (i = 0; i < mp4->trak.nelts; i++) {
          if (trak[i].out[NGX_HTTP_MP4_CO64_DATA].buf) {
--- 747,753 ----
                   - start_offset;
  
      ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
!                    "mp4 adjustment:%O", adjustment);
  
      for (i = 0; i < mp4->trak.nelts; i++) {
          if (trak[i].out[NGX_HTTP_MP4_CO64_DATA].buf) {
*************** ngx_http_mp4_read_atom(ngx_http_mp4_file
*** 785,794 ****
  
      while (mp4->offset < end) {
  
!         if (mp4->buffer_pos + sizeof(uint32_t) > mp4->buffer_end) {
!             if (ngx_http_mp4_read(mp4) != NGX_OK) {
!                 return NGX_ERROR;
!             }
          }
  
          atom_header = mp4->buffer_pos;
--- 788,795 ----
  
      while (mp4->offset < end) {
  
!         if (ngx_http_mp4_read(mp4, sizeof(uint32_t)) != NGX_OK) {
!             return NGX_ERROR;
          }
  
          atom_header = mp4->buffer_pos;
*************** ngx_http_mp4_read_atom(ngx_http_mp4_file
*** 805,821 ****
  
              if (atom_size == 1) {
  
!                 if (mp4->buffer_pos + sizeof(ngx_mp4_atom_header64_t)
!                     > mp4->buffer_end)
                  {
!                     if (ngx_http_mp4_read(mp4) != NGX_OK) {
!                         return NGX_ERROR;
!                     }
! 
!                     atom_header = mp4->buffer_pos;
                  }
  
                  /* 64-bit atom size */
                  atom_size = ngx_mp4_get_64value(atom_header + 8);
                  atom_header_size = sizeof(ngx_mp4_atom_header64_t);
  
--- 806,819 ----
  
              if (atom_size == 1) {
  
!                 if (ngx_http_mp4_read(mp4, sizeof(ngx_mp4_atom_header64_t))
!                     != NGX_OK)
                  {
!                     return NGX_ERROR;
                  }
  
                  /* 64-bit atom size */
+                 atom_header = mp4->buffer_pos;
                  atom_size = ngx_mp4_get_64value(atom_header + 8);
                  atom_header_size = sizeof(ngx_mp4_atom_header64_t);
  
*************** ngx_http_mp4_read_atom(ngx_http_mp4_file
*** 827,846 ****
              }
          }
  
!         if (mp4->buffer_pos + sizeof(ngx_mp4_atom_header_t) > mp4->buffer_end) {
!             if (ngx_http_mp4_read(mp4) != NGX_OK) {
!                 return NGX_ERROR;
!             }
! 
!             atom_header = mp4->buffer_pos;
          }
  
          atom_name = atom_header + sizeof(uint32_t);
  
          ngx_log_debug4(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                         "mp4 atom: %*s @%O:%uL",
                         4, atom_name, mp4->offset, atom_size);
  
          for (n = 0; atom[n].name; n++) {
  
              if (ngx_strncmp(atom_name, atom[n].name, 4) == 0) {
--- 825,850 ----
              }
          }
  
!         if (ngx_http_mp4_read(mp4, sizeof(ngx_mp4_atom_header_t)) != NGX_OK) {
!             return NGX_ERROR;
          }
  
+         atom_header = mp4->buffer_pos;
          atom_name = atom_header + sizeof(uint32_t);
  
          ngx_log_debug4(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                         "mp4 atom: %*s @%O:%uL",
                         4, atom_name, mp4->offset, atom_size);
  
+         if (atom_size > (uint64_t) (NGX_MAX_OFF_T_VALUE - mp4->offset)
+             || mp4->offset + (off_t) atom_size > end)
+         {
+             ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
+                           "\"%s\" mp4 atom too large:%uL",
+                           mp4->file.name.data, atom_size);
+             return NGX_ERROR;
+         }
+ 
          for (n = 0; atom[n].name; n++) {
  
              if (ngx_strncmp(atom_name, atom[n].name, 4) == 0) {
*************** ngx_http_mp4_read_atom(ngx_http_mp4_file
*** 867,880 ****
  
  
  static ngx_int_t
! ngx_http_mp4_read(ngx_http_mp4_file_t *mp4)
  {
!     ngx_int_t  n;
  
      if (mp4->offset + (off_t) mp4->buffer_size > mp4->end) {
          mp4->buffer_size = (size_t) (mp4->end - mp4->offset);
      }
  
      if (mp4->buffer == NULL) {
          mp4->buffer = ngx_palloc(mp4->request->pool, mp4->buffer_size);
          if (mp4->buffer == NULL) {
--- 871,894 ----
  
  
  static ngx_int_t
! ngx_http_mp4_read(ngx_http_mp4_file_t *mp4, size_t size)
  {
!     ssize_t  n;
! 
!     if (mp4->buffer_pos + size <= mp4->buffer_end) {
!         return NGX_OK;
!     }
  
      if (mp4->offset + (off_t) mp4->buffer_size > mp4->end) {
          mp4->buffer_size = (size_t) (mp4->end - mp4->offset);
      }
  
+     if (mp4->buffer_size < size) {
+         ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
+                       "\"%s\" mp4 file truncated", mp4->file.name.data);
+         return NGX_ERROR;
+     }
+ 
      if (mp4->buffer == NULL) {
          mp4->buffer = ngx_palloc(mp4->request->pool, mp4->buffer_size);
          if (mp4->buffer == NULL) {
*************** ngx_http_mp4_read(ngx_http_mp4_file_t *m
*** 882,888 ****
          }
  
          mp4->buffer_start = mp4->buffer;
-         mp4->buffer_end = mp4->buffer + mp4->buffer_size;
      }
  
      n = ngx_read_file(&mp4->file, mp4->buffer_start, mp4->buffer_size,
--- 896,901 ----
*************** ngx_http_mp4_read(ngx_http_mp4_file_t *m
*** 892,902 ****
          return NGX_ERROR;
      }
  
!     if (n == 0) {
!         return NGX_OK;
      }
  
      mp4->buffer_pos = mp4->buffer_start;
  
      return NGX_OK;
  }
--- 905,919 ----
          return NGX_ERROR;
      }
  
!     if ((size_t) n != mp4->buffer_size) {
!         ngx_log_error(NGX_LOG_CRIT, mp4->file.log, 0,
!                       ngx_read_file_n " read only %z of %z from \"%s\"",
!                       n, mp4->buffer_size, mp4->file.name.data);
!         return NGX_ERROR;
      }
  
      mp4->buffer_pos = mp4->buffer_start;
+     mp4->buffer_end = mp4->buffer_start + mp4->buffer_size;
  
      return NGX_OK;
  }
*************** ngx_http_mp4_read_ftyp_atom(ngx_http_mp4
*** 911,917 ****
  
      ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, "mp4 ftyp atom");
  
!     if (atom_data_size > 1024) {
          ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                        "\"%s\" mp4 ftyp atom is too large:%uL",
                        mp4->file.name.data, atom_data_size);
--- 928,936 ----
  
      ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, "mp4 ftyp atom");
  
!     if (atom_data_size > 1024
!         || ngx_mp4_atom_data(mp4) + atom_data_size > mp4->buffer_end)
!     {
          ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                        "\"%s\" mp4 ftyp atom is too large:%uL",
                        mp4->file.name.data, atom_data_size);
*************** ngx_http_mp4_read_mvhd_atom(ngx_http_mp4
*** 1160,1165 ****
--- 1179,1190 ----
      mvhd64_atom = (ngx_mp4_mvhd64_atom_t *) atom_header;
      ngx_mp4_set_atom_name(atom_header, 'm', 'v', 'h', 'd');
  
+     if (ngx_mp4_atom_data_size(ngx_mp4_mvhd_atom_t) > atom_data_size) {
+         ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
+                       "\"%s\" mp4 mvhd atom too small", mp4->file.name.data);
+         return NGX_ERROR;
+     }
+ 
      if (mvhd_atom->version[0] == 0) {
          /* version 0: 32-bit duration */
          timescale = ngx_mp4_get_32value(mvhd_atom->timescale);
*************** ngx_http_mp4_read_mvhd_atom(ngx_http_mp4
*** 1167,1172 ****
--- 1192,1205 ----
  
      } else {
          /* version 1: 64-bit duration */
+ 
+         if (ngx_mp4_atom_data_size(ngx_mp4_mvhd64_atom_t) > atom_data_size) {
+             ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
+                           "\"%s\" mp4 mvhd atom too small",
+                           mp4->file.name.data);
+             return NGX_ERROR;
+         }
+ 
          timescale = ngx_mp4_get_32value(mvhd64_atom->timescale);
          duration = ngx_mp4_get_64value(mvhd64_atom->duration);
      }
*************** ngx_http_mp4_read_tkhd_atom(ngx_http_mp4
*** 1337,1348 ****
--- 1370,1395 ----
      tkhd64_atom = (ngx_mp4_tkhd64_atom_t *) atom_header;
      ngx_mp4_set_atom_name(tkhd_atom, 't', 'k', 'h', 'd');
  
+     if (ngx_mp4_atom_data_size(ngx_mp4_tkhd_atom_t) > atom_data_size) {
+         ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
+                       "\"%s\" mp4 tkhd atom too small", mp4->file.name.data);
+         return NGX_ERROR;
+     }
+ 
      if (tkhd_atom->version[0] == 0) {
          /* version 0: 32-bit duration */
          duration = ngx_mp4_get_32value(tkhd_atom->duration);
  
      } else {
          /* version 1: 64-bit duration */
+ 
+         if (ngx_mp4_atom_data_size(ngx_mp4_tkhd64_atom_t) > atom_data_size) {
+             ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
+                           "\"%s\" mp4 tkhd atom too small",
+                           mp4->file.name.data);
+             return NGX_ERROR;
+         }
+ 
          duration = ngx_mp4_get_64value(tkhd64_atom->duration);
      }
  
*************** ngx_http_mp4_read_mdhd_atom(ngx_http_mp4
*** 1466,1471 ****
--- 1513,1524 ----
      mdhd64_atom = (ngx_mp4_mdhd64_atom_t *) atom_header;
      ngx_mp4_set_atom_name(mdhd_atom, 'm', 'd', 'h', 'd');
  
+     if (ngx_mp4_atom_data_size(ngx_mp4_mdhd_atom_t) > atom_data_size) {
+         ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
+                       "\"%s\" mp4 mdhd atom too small", mp4->file.name.data);
+         return NGX_ERROR;
+     }
+ 
      if (mdhd_atom->version[0] == 0) {
          /* version 0: everything is 32-bit */
          timescale = ngx_mp4_get_32value(mdhd_atom->timescale);
*************** ngx_http_mp4_read_mdhd_atom(ngx_http_mp4
*** 1473,1478 ****
--- 1526,1539 ----
  
      } else {
          /* version 1: 64-bit duration and 32-bit timescale */
+ 
+         if (ngx_mp4_atom_data_size(ngx_mp4_mdhd64_atom_t) > atom_data_size) {
+             ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
+                           "\"%s\" mp4 mdhd atom too small",
+                           mp4->file.name.data);
+             return NGX_ERROR;
+         }
+ 
          timescale = ngx_mp4_get_32value(mdhd64_atom->timescale);
          duration = ngx_mp4_get_64value(mdhd64_atom->duration);
      }
*************** ngx_http_mp4_read_stsd_atom(ngx_http_mp4
*** 1748,1759 ****
      ngx_mp4_set_32value(stsd_atom->size, atom_size);
      ngx_mp4_set_atom_name(stsd_atom, 's', 't', 's', 'd');
  
!     if ((uint64_t) (sizeof(ngx_mp4_stsd_atom_t) - sizeof(ngx_mp4_atom_header_t))
!          > atom_data_size)
!     {
          ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
!                       "\"%s\" mp4 stsd atom too large",
!                       mp4->file.name.data);
          return NGX_ERROR;
      }
  
--- 1809,1817 ----
      ngx_mp4_set_32value(stsd_atom->size, atom_size);
      ngx_mp4_set_atom_name(stsd_atom, 's', 't', 's', 'd');
  
!     if (ngx_mp4_atom_data_size(ngx_mp4_stsd_atom_t) > atom_data_size) {
          ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
!                       "\"%s\" mp4 stsd atom too small", mp4->file.name.data);
          return NGX_ERROR;
      }
  
*************** ngx_http_mp4_read_stts_atom(ngx_http_mp4
*** 1817,1837 ****
      stts_atom = (ngx_mp4_stts_atom_t *) atom_header;
      ngx_mp4_set_atom_name(stts_atom, 's', 't', 't', 's');
  
      entries = ngx_mp4_get_32value(stts_atom->entries);
  
      ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                     "mp4 time-to-sample entries:%uD", entries);
  
!     atom_table = atom_header + sizeof(ngx_mp4_stts_atom_t);
!     atom_end = atom_table + entries * sizeof(ngx_mp4_stts_entry_t);
! 
!     if ((uint64_t) (atom_end - stts_atom->version) > atom_data_size) {
          ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
!                       "\"%s\" mp4 stts atom too large",
!                       mp4->file.name.data);
          return NGX_ERROR;
      }
  
      trak = ngx_mp4_last_trak(mp4);
      trak->time_to_sample_entries = entries;
  
--- 1875,1902 ----
      stts_atom = (ngx_mp4_stts_atom_t *) atom_header;
      ngx_mp4_set_atom_name(stts_atom, 's', 't', 't', 's');
  
+     if (ngx_mp4_atom_data_size(ngx_mp4_stts_atom_t) > atom_data_size) {
+         ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
+                       "\"%s\" mp4 stts atom too small", mp4->file.name.data);
+         return NGX_ERROR;
+     }
+ 
      entries = ngx_mp4_get_32value(stts_atom->entries);
  
      ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                     "mp4 time-to-sample entries:%uD", entries);
  
!     if (ngx_mp4_atom_data_size(ngx_mp4_stts_atom_t)
!         + entries * sizeof(ngx_mp4_stts_entry_t) > atom_data_size)
!     {
          ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
!                       "\"%s\" mp4 stts atom too small", mp4->file.name.data);
          return NGX_ERROR;
      }
  
+     atom_table = atom_header + sizeof(ngx_mp4_stts_atom_t);
+     atom_end = atom_table + entries * sizeof(ngx_mp4_stts_entry_t);
+ 
      trak = ngx_mp4_last_trak(mp4);
      trak->time_to_sample_entries = entries;
  
*************** ngx_http_mp4_update_stts_atom(ngx_http_m
*** 1902,1908 ****
  
          if (start_time < (uint64_t) count * duration) {
              start_sample += (ngx_uint_t) (start_time / duration);
!             count -= start_sample;
              ngx_mp4_set_32value(entry->count, count);
              goto found;
          }
--- 1967,1973 ----
  
          if (start_time < (uint64_t) count * duration) {
              start_sample += (ngx_uint_t) (start_time / duration);
!             count -= (uint32_t) (start_time / duration);
              ngx_mp4_set_32value(entry->count, count);
              goto found;
          }
*************** ngx_http_mp4_read_stss_atom(ngx_http_mp4
*** 1965,1970 ****
--- 2030,2041 ----
      stss_atom = (ngx_http_mp4_stss_atom_t *) atom_header;
      ngx_mp4_set_atom_name(stss_atom, 's', 't', 's', 's');
  
+     if (ngx_mp4_atom_data_size(ngx_http_mp4_stss_atom_t) > atom_data_size) {
+         ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
+                       "\"%s\" mp4 stss atom too small", mp4->file.name.data);
+         return NGX_ERROR;
+     }
+ 
      entries = ngx_mp4_get_32value(stss_atom->entries);
  
      ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
*************** ngx_http_mp4_read_stss_atom(ngx_http_mp4
*** 1980,1993 ****
      atom->pos = atom_header;
      atom->last = atom_table;
  
!     atom_end = atom_table + entries * sizeof(uint32_t);
! 
!     if ((uint64_t) (atom_end - stss_atom->version) > atom_data_size) {
          ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
!                       "\"%s\" mp4 stss atom too large", mp4->file.name.data);
          return NGX_ERROR;
      }
  
      data = &trak->stss_data_buf;
      data->temporary = 1;
      data->pos = atom_table;
--- 2051,2066 ----
      atom->pos = atom_header;
      atom->last = atom_table;
  
!     if (ngx_mp4_atom_data_size(ngx_http_mp4_stss_atom_t)
!         + entries * sizeof(uint32_t) > atom_data_size)
!     {
          ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
!                       "\"%s\" mp4 stss atom too small", mp4->file.name.data);
          return NGX_ERROR;
      }
  
+     atom_end = atom_table + entries * sizeof(uint32_t);
+ 
      data = &trak->stss_data_buf;
      data->temporary = 1;
      data->pos = atom_table;
*************** ngx_http_mp4_read_ctts_atom(ngx_http_mp4
*** 2110,2115 ****
--- 2183,2194 ----
      ctts_atom = (ngx_mp4_ctts_atom_t *) atom_header;
      ngx_mp4_set_atom_name(ctts_atom, 'c', 't', 't', 's');
  
+     if (ngx_mp4_atom_data_size(ngx_mp4_ctts_atom_t) > atom_data_size) {
+         ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
+                       "\"%s\" mp4 ctts atom too small", mp4->file.name.data);
+         return NGX_ERROR;
+     }
+ 
      entries = ngx_mp4_get_32value(ctts_atom->entries);
  
      ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
*************** ngx_http_mp4_read_ctts_atom(ngx_http_mp4
*** 2125,2138 ****
      atom->pos = atom_header;
      atom->last = atom_table;
  
!     atom_end = atom_table + entries * sizeof(ngx_mp4_ctts_entry_t);
! 
!     if ((uint64_t) (atom_end - ctts_atom->version) > atom_data_size) {
          ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
!                       "\"%s\" mp4 ctts atom too large", mp4->file.name.data);
          return NGX_ERROR;
      }
  
      data = &trak->ctts_data_buf;
      data->temporary = 1;
      data->pos = atom_table;
--- 2204,2219 ----
      atom->pos = atom_header;
      atom->last = atom_table;
  
!     if (ngx_mp4_atom_data_size(ngx_mp4_ctts_atom_t)
!         + entries * sizeof(ngx_mp4_ctts_entry_t) > atom_data_size)
!     {
          ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
!                       "\"%s\" mp4 ctts atom too small", mp4->file.name.data);
          return NGX_ERROR;
      }
  
+     atom_end = atom_table + entries * sizeof(ngx_mp4_ctts_entry_t);
+ 
      data = &trak->ctts_data_buf;
      data->temporary = 1;
      data->pos = atom_table;
*************** ngx_http_mp4_read_stsc_atom(ngx_http_mp4
*** 2243,2263 ****
      stsc_atom = (ngx_mp4_stsc_atom_t *) atom_header;
      ngx_mp4_set_atom_name(stsc_atom, 's', 't', 's', 'c');
  
      entries = ngx_mp4_get_32value(stsc_atom->entries);
  
      ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                     "sample-to-chunk entries:%uD", entries);
  
!     atom_table = atom_header + sizeof(ngx_mp4_stsc_atom_t);
!     atom_end = atom_table + entries * sizeof(ngx_mp4_stsc_entry_t);
! 
!     if ((uint64_t) (atom_end - stsc_atom->version) > atom_data_size) {
          ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
!                       "\"%s\" mp4 stsc atom too large",
!                       mp4->file.name.data);
          return NGX_ERROR;
      }
  
      trak = ngx_mp4_last_trak(mp4);
      trak->sample_to_chunk_entries = entries;
  
--- 2324,2351 ----
      stsc_atom = (ngx_mp4_stsc_atom_t *) atom_header;
      ngx_mp4_set_atom_name(stsc_atom, 's', 't', 's', 'c');
  
+     if (ngx_mp4_atom_data_size(ngx_mp4_stsc_atom_t) > atom_data_size) {
+         ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
+                       "\"%s\" mp4 stsc atom too small", mp4->file.name.data);
+         return NGX_ERROR;
+     }
+ 
      entries = ngx_mp4_get_32value(stsc_atom->entries);
  
      ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                     "sample-to-chunk entries:%uD", entries);
  
!     if (ngx_mp4_atom_data_size(ngx_mp4_stsc_atom_t)
!         + entries * sizeof(ngx_mp4_stsc_entry_t) > atom_data_size)
!     {
          ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
!                       "\"%s\" mp4 stsc atom too small", mp4->file.name.data);
          return NGX_ERROR;
      }
  
+     atom_table = atom_header + sizeof(ngx_mp4_stsc_atom_t);
+     atom_end = atom_table + entries * sizeof(ngx_mp4_stsc_entry_t);
+ 
      trak = ngx_mp4_last_trak(mp4);
      trak->sample_to_chunk_entries = entries;
  
*************** ngx_http_mp4_update_stsc_atom(ngx_http_m
*** 2309,2314 ****
--- 2397,2409 ----
          return NGX_ERROR;
      }
  
+     if (trak->sample_to_chunk_entries == 0) {
+         ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
+                       "zero number of entries in stsc atom in \"%s\"",
+                       mp4->file.name.data);
+         return NGX_ERROR;
+     }
+ 
      start_sample = (uint32_t) trak->start_sample;
      entries = trak->sample_to_chunk_entries - 1;
  
*************** ngx_http_mp4_read_stsz_atom(ngx_http_mp4
*** 2450,2455 ****
--- 2545,2556 ----
      stsz_atom = (ngx_mp4_stsz_atom_t *) atom_header;
      ngx_mp4_set_atom_name(stsz_atom, 's', 't', 's', 'z');
  
+     if (ngx_mp4_atom_data_size(ngx_mp4_stsz_atom_t) > atom_data_size) {
+         ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
+                       "\"%s\" mp4 stsz atom too small", mp4->file.name.data);
+         return NGX_ERROR;
+     }
+ 
      size = ngx_mp4_get_32value(stsz_atom->uniform_size);
      entries = ngx_mp4_get_32value(stsz_atom->entries);
  
*************** ngx_http_mp4_read_stsz_atom(ngx_http_mp4
*** 2469,2483 ****
      trak->out[NGX_HTTP_MP4_STSZ_ATOM].buf = atom;
  
      if (size == 0) {
!         atom_end = atom_table + entries * sizeof(uint32_t);
! 
!         if ((uint64_t) (atom_end - stsz_atom->version) > atom_data_size) {
              ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
!                           "\"%s\" mp4 stsz atom too large",
                            mp4->file.name.data);
              return NGX_ERROR;
          }
  
          data = &trak->stsz_data_buf;
          data->temporary = 1;
          data->pos = atom_table;
--- 2570,2586 ----
      trak->out[NGX_HTTP_MP4_STSZ_ATOM].buf = atom;
  
      if (size == 0) {
!         if (ngx_mp4_atom_data_size(ngx_mp4_stsz_atom_t)
!             + entries * sizeof(uint32_t) > atom_data_size)
!         {
              ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
!                           "\"%s\" mp4 stsz atom too small",
                            mp4->file.name.data);
              return NGX_ERROR;
          }
  
+         atom_end = atom_table + entries * sizeof(uint32_t);
+ 
          data = &trak->stsz_data_buf;
          data->temporary = 1;
          data->pos = atom_table;
*************** ngx_http_mp4_read_stsz_atom(ngx_http_mp4
*** 2499,2505 ****
  }
  
  
! static void
  ngx_http_mp4_update_stsz_atom(ngx_http_mp4_file_t *mp4,
      ngx_http_mp4_trak_t *trak)
  {
--- 2602,2608 ----
  }
  
  
! static ngx_int_t
  ngx_http_mp4_update_stsz_atom(ngx_http_mp4_file_t *mp4,
      ngx_http_mp4_trak_t *trak)
  {
*************** ngx_http_mp4_update_stsz_atom(ngx_http_m
*** 2520,2525 ****
--- 2623,2635 ----
      data = trak->out[NGX_HTTP_MP4_STSZ_DATA].buf;
  
      if (data) {
+         if (trak->start_sample > trak->sample_sizes_entries) {
+             ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
+                           "start time is out mp4 stsz samples in \"%s\"",
+                           mp4->file.name.data);
+             return NGX_ERROR;
+         }
+ 
          data->pos += trak->start_sample * sizeof(uint32_t);
          end = (uint32_t *) data->pos;
  
*************** ngx_http_mp4_update_stsz_atom(ngx_http_m
*** 2540,2545 ****
--- 2650,2657 ----
          ngx_mp4_set_32value(stsz_atom->entries,
                              trak->sample_sizes_entries - trak->start_sample);
      }
+ 
+     return NGX_OK;
  }
  
  
*************** ngx_http_mp4_read_stco_atom(ngx_http_mp4
*** 2569,2587 ****
      stco_atom = (ngx_mp4_stco_atom_t *) atom_header;
      ngx_mp4_set_atom_name(stco_atom, 's', 't', 'c', 'o');
  
      entries = ngx_mp4_get_32value(stco_atom->entries);
  
      ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, "chunks:%uD", entries);
  
!     atom_table = atom_header + sizeof(ngx_mp4_stco_atom_t);
!     atom_end = atom_table + entries * sizeof(uint32_t);
! 
!     if ((uint64_t) (atom_end - stco_atom->version) > atom_data_size) {
          ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
!                       "\"%s\" mp4 stco atom too large", mp4->file.name.data);
          return NGX_ERROR;
      }
  
      trak = ngx_mp4_last_trak(mp4);
      trak->chunks = entries;
  
--- 2681,2707 ----
      stco_atom = (ngx_mp4_stco_atom_t *) atom_header;
      ngx_mp4_set_atom_name(stco_atom, 's', 't', 'c', 'o');
  
+     if (ngx_mp4_atom_data_size(ngx_mp4_stco_atom_t) > atom_data_size) {
+         ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
+                       "\"%s\" mp4 stco atom too small", mp4->file.name.data);
+         return NGX_ERROR;
+     }
+ 
      entries = ngx_mp4_get_32value(stco_atom->entries);
  
      ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, "chunks:%uD", entries);
  
!     if (ngx_mp4_atom_data_size(ngx_mp4_stco_atom_t)
!         + entries * sizeof(uint32_t) > atom_data_size)
!     {
          ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
!                       "\"%s\" mp4 stco atom too small", mp4->file.name.data);
          return NGX_ERROR;
      }
  
+     atom_table = atom_header + sizeof(ngx_mp4_stco_atom_t);
+     atom_end = atom_table + entries * sizeof(uint32_t);
+ 
      trak = ngx_mp4_last_trak(mp4);
      trak->chunks = entries;
  
*************** ngx_http_mp4_update_stco_atom(ngx_http_m
*** 2630,2635 ****
--- 2750,2762 ----
          return NGX_ERROR;
      }
  
+     if (trak->start_chunk > trak->chunks) {
+         ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
+                       "start time is out mp4 stco chunks in \"%s\"",
+                       mp4->file.name.data);
+         return NGX_ERROR;
+     }
+ 
      data->pos += trak->start_chunk * sizeof(uint32_t);
      atom_size = sizeof(ngx_mp4_stco_atom_t) + (data->last - data->pos);
      trak->size += atom_size;
*************** ngx_http_mp4_read_co64_atom(ngx_http_mp4
*** 2705,2723 ****
      co64_atom = (ngx_mp4_co64_atom_t *) atom_header;
      ngx_mp4_set_atom_name(co64_atom, 'c', 'o', '6', '4');
  
      entries = ngx_mp4_get_32value(co64_atom->entries);
  
      ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, "chunks:%uD", entries);
  
!     atom_table = atom_header + sizeof(ngx_mp4_co64_atom_t);
!     atom_end = atom_table + entries * sizeof(uint64_t);
! 
!     if ((uint64_t) (atom_end - co64_atom->version) > atom_data_size) {
          ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
!                       "\"%s\" mp4 co64 atom too large", mp4->file.name.data);
          return NGX_ERROR;
      }
  
      trak = ngx_mp4_last_trak(mp4);
      trak->chunks = entries;
  
--- 2832,2858 ----
      co64_atom = (ngx_mp4_co64_atom_t *) atom_header;
      ngx_mp4_set_atom_name(co64_atom, 'c', 'o', '6', '4');
  
+     if (ngx_mp4_atom_data_size(ngx_mp4_co64_atom_t) > atom_data_size) {
+         ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
+                       "\"%s\" mp4 co64 atom too small", mp4->file.name.data);
+         return NGX_ERROR;
+     }
+ 
      entries = ngx_mp4_get_32value(co64_atom->entries);
  
      ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, "chunks:%uD", entries);
  
!     if (ngx_mp4_atom_data_size(ngx_mp4_co64_atom_t)
!         + entries * sizeof(uint64_t) > atom_data_size)
!     {
          ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
!                       "\"%s\" mp4 co64 atom too small", mp4->file.name.data);
          return NGX_ERROR;
      }
  
+     atom_table = atom_header + sizeof(ngx_mp4_co64_atom_t);
+     atom_end = atom_table + entries * sizeof(uint64_t);
+ 
      trak = ngx_mp4_last_trak(mp4);
      trak->chunks = entries;
  
*************** ngx_http_mp4_update_co64_atom(ngx_http_m
*** 2765,2770 ****
--- 2900,2912 ----
                        mp4->file.name.data);
          return NGX_ERROR;
      }
+ 
+     if (trak->start_chunk > trak->chunks) {
+         ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
+                       "start time is out mp4 co64 chunks in \"%s\"",
+                       mp4->file.name.data);
+         return NGX_ERROR;
+     }
  
      data->pos += trak->start_chunk * sizeof(uint64_t);
      atom_size = sizeof(ngx_mp4_co64_atom_t) + (data->last - data->pos);

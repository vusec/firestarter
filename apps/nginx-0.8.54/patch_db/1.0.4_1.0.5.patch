diff -p -N --text -r /tmp/patch.inc.get1.ieK5xy/src/core/nginx.h /tmp/patch.inc.get2.YjlZa6/src/core/nginx.h
*** /tmp/patch.inc.get1.ieK5xy/src/core/nginx.h	2013-04-30 01:49:21.710928722 +0200
--- /tmp/patch.inc.get2.YjlZa6/src/core/nginx.h	2013-04-30 01:49:24.990944989 +0200
***************
*** 8,15 ****
  #define _NGINX_H_INCLUDED_
  
  
! #define nginx_version      1000004
! #define NGINX_VERSION      "1.0.4"
  #define NGINX_VER          "nginx/" NGINX_VERSION
  
  #define NGINX_VAR          "NGINX"
--- 8,15 ----
  #define _NGINX_H_INCLUDED_
  
  
! #define nginx_version      1000005
! #define NGINX_VERSION      "1.0.5"
  #define NGINX_VER          "nginx/" NGINX_VERSION
  
  #define NGINX_VAR          "NGINX"
diff -p -N --text -r /tmp/patch.inc.get1.ieK5xy/src/core/ngx_md5.c /tmp/patch.inc.get2.YjlZa6/src/core/ngx_md5.c
*** /tmp/patch.inc.get1.ieK5xy/src/core/ngx_md5.c	2013-04-30 01:49:21.714928758 +0200
--- /tmp/patch.inc.get2.YjlZa6/src/core/ngx_md5.c	2013-04-30 01:49:24.990944989 +0200
*************** ngx_md5_update(ngx_md5_t *ctx, const voi
*** 36,42 ****
  {
      size_t  used, free;
  
!     used = ctx->bytes & 0x3f;
      ctx->bytes += size;
  
      if (used) {
--- 36,42 ----
  {
      size_t  used, free;
  
!     used = (size_t) (ctx->bytes & 0x3f);
      ctx->bytes += size;
  
      if (used) {
*************** ngx_md5_final(u_char result[16], ngx_md5
*** 66,72 ****
  {
      size_t  used, free;
  
!     used = ctx->bytes & 0x3f;
  
      ctx->buffer[used++] = 0x80;
  
--- 66,72 ----
  {
      size_t  used, free;
  
!     used = (size_t) (ctx->bytes & 0x3f);
  
      ctx->buffer[used++] = 0x80;
  
*************** ngx_md5_final(u_char result[16], ngx_md5
*** 82,114 ****
      ngx_memzero(&ctx->buffer[used], free - 8);
  
      ctx->bytes <<= 3;
!     ctx->buffer[56] = ctx->bytes;
!     ctx->buffer[57] = ctx->bytes >> 8;
!     ctx->buffer[58] = ctx->bytes >> 16;
!     ctx->buffer[59] = ctx->bytes >> 24;
!     ctx->buffer[60] = ctx->bytes >> 32;
!     ctx->buffer[61] = ctx->bytes >> 40;
!     ctx->buffer[62] = ctx->bytes >> 48;
!     ctx->buffer[63] = ctx->bytes >> 56;
  
      (void) ngx_md5_body(ctx, ctx->buffer, 64);
  
!     result[0] = ctx->a;
!     result[1] = ctx->a >> 8;
!     result[2] = ctx->a >> 16;
!     result[3] = ctx->a >> 24;
!     result[4] = ctx->b;
!     result[5] = ctx->b >> 8;
!     result[6] = ctx->b >> 16;
!     result[7] = ctx->b >> 24;
!     result[8] = ctx->c;
!     result[9] = ctx->c >> 8;
!     result[10] = ctx->c >> 16;
!     result[11] = ctx->c >> 24;
!     result[12] = ctx->d;
!     result[13] = ctx->d >> 8;
!     result[14] = ctx->d >> 16;
!     result[15] = ctx->d >> 24;
  
      ngx_memzero(ctx, sizeof(*ctx));
  }
--- 82,114 ----
      ngx_memzero(&ctx->buffer[used], free - 8);
  
      ctx->bytes <<= 3;
!     ctx->buffer[56] = (u_char) ctx->bytes;
!     ctx->buffer[57] = (u_char) (ctx->bytes >> 8);
!     ctx->buffer[58] = (u_char) (ctx->bytes >> 16);
!     ctx->buffer[59] = (u_char) (ctx->bytes >> 24);
!     ctx->buffer[60] = (u_char) (ctx->bytes >> 32);
!     ctx->buffer[61] = (u_char) (ctx->bytes >> 40);
!     ctx->buffer[62] = (u_char) (ctx->bytes >> 48);
!     ctx->buffer[63] = (u_char) (ctx->bytes >> 56);
  
      (void) ngx_md5_body(ctx, ctx->buffer, 64);
  
!     result[0] = (u_char) ctx->a;
!     result[1] = (u_char) (ctx->a >> 8);
!     result[2] = (u_char) (ctx->a >> 16);
!     result[3] = (u_char) (ctx->a >> 24);
!     result[4] = (u_char) ctx->b;
!     result[5] = (u_char) (ctx->b >> 8);
!     result[6] = (u_char) (ctx->b >> 16);
!     result[7] = (u_char) (ctx->b >> 24);
!     result[8] = (u_char) ctx->c;
!     result[9] = (u_char) (ctx->c >> 8);
!     result[10] = (u_char) (ctx->c >> 16);
!     result[11] = (u_char) (ctx->c >> 24);
!     result[12] = (u_char) ctx->d;
!     result[13] = (u_char) (ctx->d >> 8);
!     result[14] = (u_char) (ctx->d >> 16);
!     result[15] = (u_char) (ctx->d >> 24);
  
      ngx_memzero(ctx, sizeof(*ctx));
  }
diff -p -N --text -r /tmp/patch.inc.get1.ieK5xy/src/http/modules/ngx_http_referer_module.c /tmp/patch.inc.get2.YjlZa6/src/http/modules/ngx_http_referer_module.c
*** /tmp/patch.inc.get1.ieK5xy/src/http/modules/ngx_http_referer_module.c	2013-04-30 01:49:21.706928697 +0200
--- /tmp/patch.inc.get2.YjlZa6/src/http/modules/ngx_http_referer_module.c	2013-04-30 01:49:24.986944971 +0200
*************** typedef struct {
*** 29,34 ****
--- 29,37 ----
      ngx_flag_t               blocked_referer;
  
      ngx_hash_keys_arrays_t  *keys;
+ 
+     ngx_uint_t               referer_hash_max_size;
+     ngx_uint_t               referer_hash_bucket_size;
  } ngx_http_referer_conf_t;
  
  
*************** static ngx_command_t  ngx_http_referer_c
*** 54,59 ****
--- 57,76 ----
        0,
        NULL },
  
+     { ngx_string("referer_hash_max_size"),
+       NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+       ngx_conf_set_num_slot,
+       NGX_HTTP_LOC_CONF_OFFSET,
+       offsetof(ngx_http_referer_conf_t, referer_hash_max_size),
+       NULL },
+ 
+     { ngx_string("referer_hash_bucket_size"),
+       NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE1,
+       ngx_conf_set_num_slot,
+       NGX_HTTP_LOC_CONF_OFFSET,
+       offsetof(ngx_http_referer_conf_t, referer_hash_bucket_size),
+       NULL },
+ 
        ngx_null_command
  };
  
*************** ngx_http_referer_create_conf(ngx_conf_t
*** 239,244 ****
--- 256,263 ----
  
      conf->no_referer = NGX_CONF_UNSET;
      conf->blocked_referer = NGX_CONF_UNSET;
+     conf->referer_hash_max_size = NGX_CONF_UNSET_UINT;
+     conf->referer_hash_bucket_size = NGX_CONF_UNSET_UINT;
  
      return conf;
  }
*************** ngx_http_referer_merge_conf(ngx_conf_t *
*** 260,265 ****
--- 279,288 ----
  #endif
          ngx_conf_merge_value(conf->no_referer, prev->no_referer, 0);
          ngx_conf_merge_value(conf->blocked_referer, prev->blocked_referer, 0);
+         ngx_conf_merge_uint_value(conf->referer_hash_max_size,
+                                   prev->referer_hash_max_size, 2048);
+         ngx_conf_merge_uint_value(conf->referer_hash_bucket_size,
+                                   prev->referer_hash_bucket_size, 64);
  
          return NGX_CONF_OK;
      }
*************** ngx_http_referer_merge_conf(ngx_conf_t *
*** 276,284 ****
          return NGX_CONF_ERROR;
      }
  
      hash.key = ngx_hash_key_lc;
!     hash.max_size = 2048; /* TODO: referer_hash_max_size; */
!     hash.bucket_size = 64; /* TODO: referer_hash_bucket_size; */
      hash.name = "referers_hash";
      hash.pool = cf->pool;
  
--- 299,314 ----
          return NGX_CONF_ERROR;
      }
  
+     ngx_conf_merge_uint_value(conf->referer_hash_max_size,
+                               prev->referer_hash_max_size, 2048);
+     ngx_conf_merge_uint_value(conf->referer_hash_bucket_size,
+                               prev->referer_hash_bucket_size, 64);
+     conf->referer_hash_bucket_size = ngx_align(conf->referer_hash_bucket_size,
+                                                ngx_cacheline_size);
+ 
      hash.key = ngx_hash_key_lc;
!     hash.max_size = conf->referer_hash_max_size;
!     hash.bucket_size = conf->referer_hash_bucket_size;
      hash.name = "referers_hash";
      hash.pool = cf->pool;
  
diff -p -N --text -r /tmp/patch.inc.get1.ieK5xy/src/http/modules/ngx_http_ssl_module.c /tmp/patch.inc.get2.YjlZa6/src/http/modules/ngx_http_ssl_module.c
*** /tmp/patch.inc.get1.ieK5xy/src/http/modules/ngx_http_ssl_module.c	2013-04-30 01:49:21.706928697 +0200
--- /tmp/patch.inc.get2.YjlZa6/src/http/modules/ngx_http_ssl_module.c	2013-04-30 01:49:24.986944971 +0200
*************** typedef ngx_int_t (*ngx_ssl_variable_han
*** 13,19 ****
      ngx_pool_t *pool, ngx_str_t *s);
  
  
! #define NGX_DEFAULT_CIPHERS  "HIGH:!ADH:!MD5"
  
  
  static ngx_int_t ngx_http_ssl_static_variable(ngx_http_request_t *r,
--- 13,19 ----
      ngx_pool_t *pool, ngx_str_t *s);
  
  
! #define NGX_DEFAULT_CIPHERS  "HIGH:!aNULL:!MD5"
  
  
  static ngx_int_t ngx_http_ssl_static_variable(ngx_http_request_t *r,
diff -p -N --text -r /tmp/patch.inc.get1.ieK5xy/src/http/modules/ngx_http_userid_filter_module.c /tmp/patch.inc.get2.YjlZa6/src/http/modules/ngx_http_userid_filter_module.c
*** /tmp/patch.inc.get1.ieK5xy/src/http/modules/ngx_http_userid_filter_module.c	2013-04-30 01:49:21.710928722 +0200
--- /tmp/patch.inc.get2.YjlZa6/src/http/modules/ngx_http_userid_filter_module.c	2013-04-30 01:49:24.986944971 +0200
*************** typedef struct {
*** 38,43 ****
--- 38,44 ----
      uint32_t    uid_got[4];
      uint32_t    uid_set[4];
      ngx_str_t   cookie;
+     ngx_uint_t  reset;
  } ngx_http_userid_ctx_t;
  
  
*************** ngx_module_t  ngx_http_userid_filter_mod
*** 185,192 ****
  };
  
  
! static ngx_str_t  ngx_http_userid_got = ngx_string("uid_got");
! static ngx_str_t  ngx_http_userid_set = ngx_string("uid_set");
  
  
  static ngx_int_t
--- 186,195 ----
  };
  
  
! static ngx_str_t   ngx_http_userid_got = ngx_string("uid_got");
! static ngx_str_t   ngx_http_userid_set = ngx_string("uid_set");
! static ngx_str_t   ngx_http_userid_reset = ngx_string("uid_reset");
! static ngx_uint_t  ngx_http_userid_reset_index;
  
  
  static ngx_int_t
*************** ngx_http_userid_set_uid(ngx_http_request
*** 387,393 ****
      p = ngx_copy(cookie, conf->name.data, conf->name.len);
      *p++ = '=';
  
!     if (ctx->uid_got[3] == 0) {
          src.len = 16;
          src.data = (u_char *) ctx->uid_set;
          dst.data = p;
--- 390,396 ----
      p = ngx_copy(cookie, conf->name.data, conf->name.len);
      *p++ = '=';
  
!     if (ctx->uid_got[3] == 0 || ctx->reset) {
          src.len = 16;
          src.data = (u_char *) ctx->uid_set;
          dst.data = p;
*************** static ngx_int_t
*** 452,462 ****
  ngx_http_userid_create_uid(ngx_http_request_t *r, ngx_http_userid_ctx_t *ctx,
      ngx_http_userid_conf_t *conf)
  {
!     ngx_connection_t     *c;
!     struct sockaddr_in   *sin;
  #if (NGX_HAVE_INET6)
!     u_char               *p;
!     struct sockaddr_in6  *sin6;
  #endif
  
      if (ctx->uid_set[3] != 0) {
--- 455,466 ----
  ngx_http_userid_create_uid(ngx_http_request_t *r, ngx_http_userid_ctx_t *ctx,
      ngx_http_userid_conf_t *conf)
  {
!     ngx_connection_t           *c;
!     struct sockaddr_in         *sin;
!     ngx_http_variable_value_t  *vv;
  #if (NGX_HAVE_INET6)
!     u_char                     *p;
!     struct sockaddr_in6        *sin6;
  #endif
  
      if (ctx->uid_set[3] != 0) {
*************** ngx_http_userid_create_uid(ngx_http_requ
*** 465,484 ****
  
      if (ctx->uid_got[3] != 0) {
  
!         if (conf->mark == '\0'
!             || (ctx->cookie.len > 23
!                 && ctx->cookie.data[22] == conf->mark
!                 && ctx->cookie.data[23] == '='))
!         {
              return NGX_OK;
-         }
  
!         ctx->uid_set[0] = ctx->uid_got[0];
!         ctx->uid_set[1] = ctx->uid_got[1];
!         ctx->uid_set[2] = ctx->uid_got[2];
!         ctx->uid_set[3] = ctx->uid_got[3];
  
!         return NGX_OK;
      }
  
      /*
--- 469,503 ----
  
      if (ctx->uid_got[3] != 0) {
  
!         vv = ngx_http_get_indexed_variable(r, ngx_http_userid_reset_index);
! 
!         if (vv->len == 0 || (vv->len == 1 && vv->data[0] == '0')) {
! 
!             if (conf->mark == '\0'
!                 || (ctx->cookie.len > 23
!                     && ctx->cookie.data[22] == conf->mark
!                     && ctx->cookie.data[23] == '='))
!             {
!                 return NGX_OK;
!             }
! 
!             ctx->uid_set[0] = ctx->uid_got[0];
!             ctx->uid_set[1] = ctx->uid_got[1];
!             ctx->uid_set[2] = ctx->uid_got[2];
!             ctx->uid_set[3] = ctx->uid_got[3];
! 
              return NGX_OK;
  
!         } else {
!             ctx->reset = 1;
  
!             if (vv->len == 3 && ngx_strncmp(vv->data, "log", 3) == 0) {
!                 ngx_log_error(NGX_LOG_NOTICE, r->connection->log, 0,
!                         "userid cookie \"%V=%08XD%08XD%08XD%08XD\" was reset",
!                         &conf->name, ctx->uid_got[0], ctx->uid_got[1],
!                         ctx->uid_got[2], ctx->uid_got[3]);
!             }
!         }
      }
  
      /*
*************** ngx_http_userid_variable(ngx_http_reques
*** 566,573 ****
--- 585,603 ----
  
  
  static ngx_int_t
+ ngx_http_userid_reset_variable(ngx_http_request_t *r,
+     ngx_http_variable_value_t *v, uintptr_t data)
+ {
+     *v = ngx_http_variable_null_value;
+ 
+     return NGX_OK;
+ }
+ 
+ 
+ static ngx_int_t
  ngx_http_userid_add_variables(ngx_conf_t *cf)
  {
+     ngx_int_t             n;
      ngx_http_variable_t  *var;
  
      var = ngx_http_add_variable(cf, &ngx_http_userid_got, 0);
*************** ngx_http_userid_add_variables(ngx_conf_t
*** 584,589 ****
--- 614,634 ----
  
      var->get_handler = ngx_http_userid_set_variable;
  
+     var = ngx_http_add_variable(cf, &ngx_http_userid_reset,
+                                 NGX_HTTP_VAR_CHANGEABLE);
+     if (var == NULL) {
+         return NGX_ERROR;
+     }
+ 
+     var->get_handler = ngx_http_userid_reset_variable;
+ 
+     n = ngx_http_get_variable_index(cf, &ngx_http_userid_reset);
+     if (n == NGX_ERROR) {
+         return NGX_ERROR;
+     }
+ 
+     ngx_http_userid_reset_index = n;
+ 
      return NGX_OK;
  }
  
diff -p -N --text -r /tmp/patch.inc.get1.ieK5xy/src/http/ngx_http_file_cache.c /tmp/patch.inc.get2.YjlZa6/src/http/ngx_http_file_cache.c
*** /tmp/patch.inc.get1.ieK5xy/src/http/ngx_http_file_cache.c	2013-04-30 01:49:21.706928697 +0200
--- /tmp/patch.inc.get2.YjlZa6/src/http/ngx_http_file_cache.c	2013-04-30 01:49:24.986944971 +0200
*************** ngx_http_file_cache_expire(ngx_http_file
*** 1099,1105 ****
          }
  
          if (fcn->deleting) {
!             continue;
          }
  
          p = ngx_hex_dump(key, (u_char *) &fcn->node.key,
--- 1099,1106 ----
          }
  
          if (fcn->deleting) {
!             wait = 1;
!             break;
          }
  
          p = ngx_hex_dump(key, (u_char *) &fcn->node.key,
diff -p -N --text -r /tmp/patch.inc.get1.ieK5xy/src/http/ngx_http_upstream.c /tmp/patch.inc.get2.YjlZa6/src/http/ngx_http_upstream.c
*** /tmp/patch.inc.get1.ieK5xy/src/http/ngx_http_upstream.c	2013-04-30 01:49:21.706928697 +0200
--- /tmp/patch.inc.get2.YjlZa6/src/http/ngx_http_upstream.c	2013-04-30 01:49:24.986944971 +0200
*************** ngx_http_upstream_cache(ngx_http_request
*** 661,666 ****
--- 661,675 ----
  
          ngx_http_file_cache_create_key(r);
  
+         if (r->cache->header_start >= u->conf->buffer_size) {
+             ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
+                 "cache key too large, increase upstream buffer size %uz",
+                 u->conf->buffer_size);
+ 
+             r->cache = NULL;
+             return NGX_DECLINED;
+         }
+ 
          switch (ngx_http_test_predicates(r, u->conf->cache_bypass)) {
  
          case NGX_ERROR:
*************** ngx_http_upstream_send_response(ngx_http
*** 2031,2045 ****
              c->error = 1;
  
          } else {
- 
- #if (NGX_HTTP_CACHE)
- 
-             if (r->cache) {
-                 ngx_http_file_cache_free(r->cache, u->pipe->temp_file);
-             }
- 
- #endif
- 
              ngx_http_upstream_finalize_request(r, u, rc);
              return;
          }
--- 2040,2045 ----
*************** ngx_http_upstream_finalize_request(ngx_h
*** 2991,3006 ****
  
  #if (NGX_HTTP_CACHE)
  
!     if (u->cacheable && r->cache) {
!         time_t  valid;
  
!         if (rc == NGX_HTTP_BAD_GATEWAY || rc == NGX_HTTP_GATEWAY_TIME_OUT) {
  
!             valid = ngx_http_file_cache_valid(u->conf->cache_valid, rc);
  
!             if (valid) {
!                 r->cache->valid_sec = ngx_time() + valid;
!                 r->cache->error = rc;
              }
          }
  
--- 2991,3009 ----
  
  #if (NGX_HTTP_CACHE)
  
!     if (r->cache) {
! 
!         if (u->cacheable) {
  
!             if (rc == NGX_HTTP_BAD_GATEWAY || rc == NGX_HTTP_GATEWAY_TIME_OUT) {
!                 time_t  valid;
  
!                 valid = ngx_http_file_cache_valid(u->conf->cache_valid, rc);
  
!                 if (valid) {
!                     r->cache->valid_sec = ngx_time() + valid;
!                     r->cache->error = rc;
!                 }
              }
          }
  
diff -p -N --text -r /tmp/patch.inc.get1.ieK5xy/src/mail/ngx_mail_ssl_module.c /tmp/patch.inc.get2.YjlZa6/src/mail/ngx_mail_ssl_module.c
*** /tmp/patch.inc.get1.ieK5xy/src/mail/ngx_mail_ssl_module.c	2013-04-30 01:49:21.710928722 +0200
--- /tmp/patch.inc.get2.YjlZa6/src/mail/ngx_mail_ssl_module.c	2013-04-30 01:49:24.990944989 +0200
***************
*** 9,15 ****
  #include <ngx_mail.h>
  
  
! #define NGX_DEFAULT_CIPHERS  "HIGH:!ADH:!MD5"
  
  
  static void *ngx_mail_ssl_create_conf(ngx_conf_t *cf);
--- 9,15 ----
  #include <ngx_mail.h>
  
  
! #define NGX_DEFAULT_CIPHERS  "HIGH:!aNULL:!MD5"
  
  
  static void *ngx_mail_ssl_create_conf(ngx_conf_t *cf);
